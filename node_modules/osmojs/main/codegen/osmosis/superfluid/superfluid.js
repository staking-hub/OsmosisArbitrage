"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UnpoolWhitelistedPools = exports.SuperfluidIntermediaryAccount = exports.SuperfluidDelegationRecord = exports.SuperfluidAssetTypeSDKType = exports.SuperfluidAssetTypeAmino = exports.SuperfluidAssetType = exports.SuperfluidAsset = exports.OsmoEquivalentMultiplierRecord = exports.LockIdIntermediaryAccountConnection = void 0;
exports.superfluidAssetTypeFromJSON = superfluidAssetTypeFromJSON;
exports.superfluidAssetTypeToJSON = superfluidAssetTypeToJSON;
var _coin = require("../../cosmos/base/v1beta1/coin");
var _helpers = require("../../helpers");
var _m0 = _interopRequireWildcard(require("protobufjs/minimal"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
/**
 * SuperfluidAssetType indicates whether the superfluid asset is
 * a native token itself or the lp share of a pool.
 */var SuperfluidAssetType;
exports.SuperfluidAssetType = SuperfluidAssetType;
(function (SuperfluidAssetType) {
  SuperfluidAssetType[SuperfluidAssetType["SuperfluidAssetTypeNative"] = 0] = "SuperfluidAssetTypeNative";
  SuperfluidAssetType[SuperfluidAssetType["SuperfluidAssetTypeLPShare"] = 1] = "SuperfluidAssetTypeLPShare";
  SuperfluidAssetType[SuperfluidAssetType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(SuperfluidAssetType || (exports.SuperfluidAssetType = SuperfluidAssetType = {}));
var SuperfluidAssetTypeSDKType = SuperfluidAssetType;
exports.SuperfluidAssetTypeSDKType = SuperfluidAssetTypeSDKType;
var SuperfluidAssetTypeAmino = SuperfluidAssetType;
exports.SuperfluidAssetTypeAmino = SuperfluidAssetTypeAmino;
function superfluidAssetTypeFromJSON(object) {
  switch (object) {
    case 0:
    case "SuperfluidAssetTypeNative":
      return SuperfluidAssetType.SuperfluidAssetTypeNative;
    case 1:
    case "SuperfluidAssetTypeLPShare":
      return SuperfluidAssetType.SuperfluidAssetTypeLPShare;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SuperfluidAssetType.UNRECOGNIZED;
  }
}
function superfluidAssetTypeToJSON(object) {
  switch (object) {
    case SuperfluidAssetType.SuperfluidAssetTypeNative:
      return "SuperfluidAssetTypeNative";
    case SuperfluidAssetType.SuperfluidAssetTypeLPShare:
      return "SuperfluidAssetTypeLPShare";
    case SuperfluidAssetType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
/** SuperfluidAsset stores the pair of superfluid asset type and denom pair */

function createBaseSuperfluidAsset() {
  return {
    denom: "",
    assetType: 0
  };
}
var SuperfluidAsset = {
  typeUrl: "/osmosis.superfluid.SuperfluidAsset",
  encode: function encode(message) {
    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    if (message.assetType !== 0) {
      writer.uint32(16).int32(message.assetType);
    }
    return writer;
  },
  decode: function decode(input, length) {
    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    var end = length === undefined ? reader.len : reader.pos + length;
    var message = createBaseSuperfluidAsset();
    while (reader.pos < end) {
      var tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.denom = reader.string();
          break;
        case 2:
          message.assetType = reader.int32();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial: function fromPartial(object) {
    var _object$denom, _object$assetType;
    var message = createBaseSuperfluidAsset();
    message.denom = (_object$denom = object.denom) !== null && _object$denom !== void 0 ? _object$denom : "";
    message.assetType = (_object$assetType = object.assetType) !== null && _object$assetType !== void 0 ? _object$assetType : 0;
    return message;
  },
  fromAmino: function fromAmino(object) {
    return {
      denom: object.denom,
      assetType: (0, _helpers.isSet)(object.asset_type) ? superfluidAssetTypeFromJSON(object.asset_type) : 0
    };
  },
  toAmino: function toAmino(message) {
    var obj = {};
    obj.denom = message.denom;
    obj.asset_type = message.assetType;
    return obj;
  },
  fromAminoMsg: function fromAminoMsg(object) {
    return SuperfluidAsset.fromAmino(object.value);
  },
  toAminoMsg: function toAminoMsg(message) {
    return {
      type: "osmosis/superfluid-asset",
      value: SuperfluidAsset.toAmino(message)
    };
  },
  fromProtoMsg: function fromProtoMsg(message) {
    return SuperfluidAsset.decode(message.value);
  },
  toProto: function toProto(message) {
    return SuperfluidAsset.encode(message).finish();
  },
  toProtoMsg: function toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.superfluid.SuperfluidAsset",
      value: SuperfluidAsset.encode(message).finish()
    };
  }
};
exports.SuperfluidAsset = SuperfluidAsset;
function createBaseSuperfluidIntermediaryAccount() {
  return {
    denom: "",
    valAddr: "",
    gaugeId: _helpers.Long.UZERO
  };
}
var SuperfluidIntermediaryAccount = {
  typeUrl: "/osmosis.superfluid.SuperfluidIntermediaryAccount",
  encode: function encode(message) {
    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    if (message.valAddr !== "") {
      writer.uint32(18).string(message.valAddr);
    }
    if (!message.gaugeId.isZero()) {
      writer.uint32(24).uint64(message.gaugeId);
    }
    return writer;
  },
  decode: function decode(input, length) {
    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    var end = length === undefined ? reader.len : reader.pos + length;
    var message = createBaseSuperfluidIntermediaryAccount();
    while (reader.pos < end) {
      var tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.denom = reader.string();
          break;
        case 2:
          message.valAddr = reader.string();
          break;
        case 3:
          message.gaugeId = reader.uint64();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial: function fromPartial(object) {
    var _object$denom2, _object$valAddr;
    var message = createBaseSuperfluidIntermediaryAccount();
    message.denom = (_object$denom2 = object.denom) !== null && _object$denom2 !== void 0 ? _object$denom2 : "";
    message.valAddr = (_object$valAddr = object.valAddr) !== null && _object$valAddr !== void 0 ? _object$valAddr : "";
    message.gaugeId = object.gaugeId !== undefined && object.gaugeId !== null ? _helpers.Long.fromValue(object.gaugeId) : _helpers.Long.UZERO;
    return message;
  },
  fromAmino: function fromAmino(object) {
    return {
      denom: object.denom,
      valAddr: object.val_addr,
      gaugeId: _helpers.Long.fromString(object.gauge_id)
    };
  },
  toAmino: function toAmino(message) {
    var obj = {};
    obj.denom = message.denom;
    obj.val_addr = message.valAddr;
    obj.gauge_id = message.gaugeId ? message.gaugeId.toString() : undefined;
    return obj;
  },
  fromAminoMsg: function fromAminoMsg(object) {
    return SuperfluidIntermediaryAccount.fromAmino(object.value);
  },
  toAminoMsg: function toAminoMsg(message) {
    return {
      type: "osmosis/superfluid-intermediary-account",
      value: SuperfluidIntermediaryAccount.toAmino(message)
    };
  },
  fromProtoMsg: function fromProtoMsg(message) {
    return SuperfluidIntermediaryAccount.decode(message.value);
  },
  toProto: function toProto(message) {
    return SuperfluidIntermediaryAccount.encode(message).finish();
  },
  toProtoMsg: function toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.superfluid.SuperfluidIntermediaryAccount",
      value: SuperfluidIntermediaryAccount.encode(message).finish()
    };
  }
};
exports.SuperfluidIntermediaryAccount = SuperfluidIntermediaryAccount;
function createBaseOsmoEquivalentMultiplierRecord() {
  return {
    epochNumber: _helpers.Long.ZERO,
    denom: "",
    multiplier: ""
  };
}
var OsmoEquivalentMultiplierRecord = {
  typeUrl: "/osmosis.superfluid.OsmoEquivalentMultiplierRecord",
  encode: function encode(message) {
    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();
    if (!message.epochNumber.isZero()) {
      writer.uint32(8).int64(message.epochNumber);
    }
    if (message.denom !== "") {
      writer.uint32(18).string(message.denom);
    }
    if (message.multiplier !== "") {
      writer.uint32(26).string(message.multiplier);
    }
    return writer;
  },
  decode: function decode(input, length) {
    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    var end = length === undefined ? reader.len : reader.pos + length;
    var message = createBaseOsmoEquivalentMultiplierRecord();
    while (reader.pos < end) {
      var tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.epochNumber = reader.int64();
          break;
        case 2:
          message.denom = reader.string();
          break;
        case 3:
          message.multiplier = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial: function fromPartial(object) {
    var _object$denom3, _object$multiplier;
    var message = createBaseOsmoEquivalentMultiplierRecord();
    message.epochNumber = object.epochNumber !== undefined && object.epochNumber !== null ? _helpers.Long.fromValue(object.epochNumber) : _helpers.Long.ZERO;
    message.denom = (_object$denom3 = object.denom) !== null && _object$denom3 !== void 0 ? _object$denom3 : "";
    message.multiplier = (_object$multiplier = object.multiplier) !== null && _object$multiplier !== void 0 ? _object$multiplier : "";
    return message;
  },
  fromAmino: function fromAmino(object) {
    return {
      epochNumber: _helpers.Long.fromString(object.epoch_number),
      denom: object.denom,
      multiplier: object.multiplier
    };
  },
  toAmino: function toAmino(message) {
    var obj = {};
    obj.epoch_number = message.epochNumber ? message.epochNumber.toString() : undefined;
    obj.denom = message.denom;
    obj.multiplier = message.multiplier;
    return obj;
  },
  fromAminoMsg: function fromAminoMsg(object) {
    return OsmoEquivalentMultiplierRecord.fromAmino(object.value);
  },
  toAminoMsg: function toAminoMsg(message) {
    return {
      type: "osmosis/osmo-equivalent-multiplier-record",
      value: OsmoEquivalentMultiplierRecord.toAmino(message)
    };
  },
  fromProtoMsg: function fromProtoMsg(message) {
    return OsmoEquivalentMultiplierRecord.decode(message.value);
  },
  toProto: function toProto(message) {
    return OsmoEquivalentMultiplierRecord.encode(message).finish();
  },
  toProtoMsg: function toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.superfluid.OsmoEquivalentMultiplierRecord",
      value: OsmoEquivalentMultiplierRecord.encode(message).finish()
    };
  }
};
exports.OsmoEquivalentMultiplierRecord = OsmoEquivalentMultiplierRecord;
function createBaseSuperfluidDelegationRecord() {
  return {
    delegatorAddress: "",
    validatorAddress: "",
    delegationAmount: undefined,
    equivalentStakedAmount: undefined
  };
}
var SuperfluidDelegationRecord = {
  typeUrl: "/osmosis.superfluid.SuperfluidDelegationRecord",
  encode: function encode(message) {
    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();
    if (message.delegatorAddress !== "") {
      writer.uint32(10).string(message.delegatorAddress);
    }
    if (message.validatorAddress !== "") {
      writer.uint32(18).string(message.validatorAddress);
    }
    if (message.delegationAmount !== undefined) {
      _coin.Coin.encode(message.delegationAmount, writer.uint32(26).fork()).ldelim();
    }
    if (message.equivalentStakedAmount !== undefined) {
      _coin.Coin.encode(message.equivalentStakedAmount, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },
  decode: function decode(input, length) {
    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    var end = length === undefined ? reader.len : reader.pos + length;
    var message = createBaseSuperfluidDelegationRecord();
    while (reader.pos < end) {
      var tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.delegatorAddress = reader.string();
          break;
        case 2:
          message.validatorAddress = reader.string();
          break;
        case 3:
          message.delegationAmount = _coin.Coin.decode(reader, reader.uint32());
          break;
        case 4:
          message.equivalentStakedAmount = _coin.Coin.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial: function fromPartial(object) {
    var _object$delegatorAddr, _object$validatorAddr;
    var message = createBaseSuperfluidDelegationRecord();
    message.delegatorAddress = (_object$delegatorAddr = object.delegatorAddress) !== null && _object$delegatorAddr !== void 0 ? _object$delegatorAddr : "";
    message.validatorAddress = (_object$validatorAddr = object.validatorAddress) !== null && _object$validatorAddr !== void 0 ? _object$validatorAddr : "";
    message.delegationAmount = object.delegationAmount !== undefined && object.delegationAmount !== null ? _coin.Coin.fromPartial(object.delegationAmount) : undefined;
    message.equivalentStakedAmount = object.equivalentStakedAmount !== undefined && object.equivalentStakedAmount !== null ? _coin.Coin.fromPartial(object.equivalentStakedAmount) : undefined;
    return message;
  },
  fromAmino: function fromAmino(object) {
    return {
      delegatorAddress: object.delegator_address,
      validatorAddress: object.validator_address,
      delegationAmount: object !== null && object !== void 0 && object.delegation_amount ? _coin.Coin.fromAmino(object.delegation_amount) : undefined,
      equivalentStakedAmount: object !== null && object !== void 0 && object.equivalent_staked_amount ? _coin.Coin.fromAmino(object.equivalent_staked_amount) : undefined
    };
  },
  toAmino: function toAmino(message) {
    var obj = {};
    obj.delegator_address = message.delegatorAddress;
    obj.validator_address = message.validatorAddress;
    obj.delegation_amount = message.delegationAmount ? _coin.Coin.toAmino(message.delegationAmount) : undefined;
    obj.equivalent_staked_amount = message.equivalentStakedAmount ? _coin.Coin.toAmino(message.equivalentStakedAmount) : undefined;
    return obj;
  },
  fromAminoMsg: function fromAminoMsg(object) {
    return SuperfluidDelegationRecord.fromAmino(object.value);
  },
  toAminoMsg: function toAminoMsg(message) {
    return {
      type: "osmosis/superfluid-delegation-record",
      value: SuperfluidDelegationRecord.toAmino(message)
    };
  },
  fromProtoMsg: function fromProtoMsg(message) {
    return SuperfluidDelegationRecord.decode(message.value);
  },
  toProto: function toProto(message) {
    return SuperfluidDelegationRecord.encode(message).finish();
  },
  toProtoMsg: function toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.superfluid.SuperfluidDelegationRecord",
      value: SuperfluidDelegationRecord.encode(message).finish()
    };
  }
};
exports.SuperfluidDelegationRecord = SuperfluidDelegationRecord;
function createBaseLockIdIntermediaryAccountConnection() {
  return {
    lockId: _helpers.Long.UZERO,
    intermediaryAccount: ""
  };
}
var LockIdIntermediaryAccountConnection = {
  typeUrl: "/osmosis.superfluid.LockIdIntermediaryAccountConnection",
  encode: function encode(message) {
    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();
    if (!message.lockId.isZero()) {
      writer.uint32(8).uint64(message.lockId);
    }
    if (message.intermediaryAccount !== "") {
      writer.uint32(18).string(message.intermediaryAccount);
    }
    return writer;
  },
  decode: function decode(input, length) {
    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    var end = length === undefined ? reader.len : reader.pos + length;
    var message = createBaseLockIdIntermediaryAccountConnection();
    while (reader.pos < end) {
      var tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.lockId = reader.uint64();
          break;
        case 2:
          message.intermediaryAccount = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial: function fromPartial(object) {
    var _object$intermediaryA;
    var message = createBaseLockIdIntermediaryAccountConnection();
    message.lockId = object.lockId !== undefined && object.lockId !== null ? _helpers.Long.fromValue(object.lockId) : _helpers.Long.UZERO;
    message.intermediaryAccount = (_object$intermediaryA = object.intermediaryAccount) !== null && _object$intermediaryA !== void 0 ? _object$intermediaryA : "";
    return message;
  },
  fromAmino: function fromAmino(object) {
    return {
      lockId: _helpers.Long.fromString(object.lock_id),
      intermediaryAccount: object.intermediary_account
    };
  },
  toAmino: function toAmino(message) {
    var obj = {};
    obj.lock_id = message.lockId ? message.lockId.toString() : undefined;
    obj.intermediary_account = message.intermediaryAccount;
    return obj;
  },
  fromAminoMsg: function fromAminoMsg(object) {
    return LockIdIntermediaryAccountConnection.fromAmino(object.value);
  },
  toAminoMsg: function toAminoMsg(message) {
    return {
      type: "osmosis/lock-id-intermediary-account-connection",
      value: LockIdIntermediaryAccountConnection.toAmino(message)
    };
  },
  fromProtoMsg: function fromProtoMsg(message) {
    return LockIdIntermediaryAccountConnection.decode(message.value);
  },
  toProto: function toProto(message) {
    return LockIdIntermediaryAccountConnection.encode(message).finish();
  },
  toProtoMsg: function toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.superfluid.LockIdIntermediaryAccountConnection",
      value: LockIdIntermediaryAccountConnection.encode(message).finish()
    };
  }
};
exports.LockIdIntermediaryAccountConnection = LockIdIntermediaryAccountConnection;
function createBaseUnpoolWhitelistedPools() {
  return {
    ids: []
  };
}
var UnpoolWhitelistedPools = {
  typeUrl: "/osmosis.superfluid.UnpoolWhitelistedPools",
  encode: function encode(message) {
    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();
    writer.uint32(10).fork();
    var _iterator = _createForOfIteratorHelper(message.ids),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var v = _step.value;
        writer.uint64(v);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    writer.ldelim();
    return writer;
  },
  decode: function decode(input, length) {
    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    var end = length === undefined ? reader.len : reader.pos + length;
    var message = createBaseUnpoolWhitelistedPools();
    while (reader.pos < end) {
      var tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if ((tag & 7) === 2) {
            var end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.ids.push(reader.uint64());
            }
          } else {
            message.ids.push(reader.uint64());
          }
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial: function fromPartial(object) {
    var _object$ids;
    var message = createBaseUnpoolWhitelistedPools();
    message.ids = ((_object$ids = object.ids) === null || _object$ids === void 0 ? void 0 : _object$ids.map(function (e) {
      return _helpers.Long.fromValue(e);
    })) || [];
    return message;
  },
  fromAmino: function fromAmino(object) {
    return {
      ids: Array.isArray(object === null || object === void 0 ? void 0 : object.ids) ? object.ids.map(function (e) {
        return e;
      }) : []
    };
  },
  toAmino: function toAmino(message) {
    var obj = {};
    if (message.ids) {
      obj.ids = message.ids.map(function (e) {
        return e;
      });
    } else {
      obj.ids = [];
    }
    return obj;
  },
  fromAminoMsg: function fromAminoMsg(object) {
    return UnpoolWhitelistedPools.fromAmino(object.value);
  },
  toAminoMsg: function toAminoMsg(message) {
    return {
      type: "osmosis/unpool-whitelisted-pools",
      value: UnpoolWhitelistedPools.toAmino(message)
    };
  },
  fromProtoMsg: function fromProtoMsg(message) {
    return UnpoolWhitelistedPools.decode(message.value);
  },
  toProto: function toProto(message) {
    return UnpoolWhitelistedPools.encode(message).finish();
  },
  toProtoMsg: function toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.superfluid.UnpoolWhitelistedPools",
      value: UnpoolWhitelistedPools.encode(message).finish()
    };
  }
};
exports.UnpoolWhitelistedPools = UnpoolWhitelistedPools;