"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LCDQueryClient = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _helpers = require("../../../../helpers");
var LCDQueryClient = /*#__PURE__*/function () {
  function LCDQueryClient(_ref) {
    var requestClient = _ref.requestClient;
    (0, _classCallCheck2["default"])(this, LCDQueryClient);
    (0, _defineProperty2["default"])(this, "req", void 0);
    this.req = requestClient;
    this.incentivizedPackets = this.incentivizedPackets.bind(this);
    this.incentivizedPacket = this.incentivizedPacket.bind(this);
    this.incentivizedPacketsForChannel = this.incentivizedPacketsForChannel.bind(this);
    this.totalRecvFees = this.totalRecvFees.bind(this);
    this.totalAckFees = this.totalAckFees.bind(this);
    this.totalTimeoutFees = this.totalTimeoutFees.bind(this);
    this.payee = this.payee.bind(this);
    this.counterpartyPayee = this.counterpartyPayee.bind(this);
    this.feeEnabledChannels = this.feeEnabledChannels.bind(this);
    this.feeEnabledChannel = this.feeEnabledChannel.bind(this);
  }
  /* IncentivizedPackets returns all incentivized packets and their associated fees */
  (0, _createClass2["default"])(LCDQueryClient, [{
    key: "incentivizedPackets",
    value: function () {
      var _incentivizedPackets = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(params) {
        var options, endpoint;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                options = {
                  params: {}
                };
                if (typeof (params === null || params === void 0 ? void 0 : params.pagination) !== "undefined") {
                  (0, _helpers.setPaginationParams)(options, params.pagination);
                }
                if (typeof (params === null || params === void 0 ? void 0 : params.queryHeight) !== "undefined") {
                  options.params.query_height = params.queryHeight;
                }
                endpoint = "ibc/apps/fee/v1/incentivized_packets";
                _context.next = 6;
                return this.req.get(endpoint, options);
              case 6:
                return _context.abrupt("return", _context.sent);
              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
      function incentivizedPackets(_x) {
        return _incentivizedPackets.apply(this, arguments);
      }
      return incentivizedPackets;
    }() /* IncentivizedPacket returns all packet fees for a packet given its identifier */
  }, {
    key: "incentivizedPacket",
    value: function () {
      var _incentivizedPacket = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(params) {
        var options, endpoint;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                options = {
                  params: {}
                };
                if (typeof (params === null || params === void 0 ? void 0 : params.packetId) !== "undefined") {
                  options.params.packet_id = params.packetId;
                }
                if (typeof (params === null || params === void 0 ? void 0 : params.queryHeight) !== "undefined") {
                  options.params.query_height = params.queryHeight;
                }
                endpoint = "ibc/apps/fee/v1/channels/".concat(params.packetId.channel_id, "/ports/").concat(params.packetId.port_id, "/sequences/").concat(params.packetId.sequence, "/incentivized_packet");
                _context2.next = 6;
                return this.req.get(endpoint, options);
              case 6:
                return _context2.abrupt("return", _context2.sent);
              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));
      function incentivizedPacket(_x2) {
        return _incentivizedPacket.apply(this, arguments);
      }
      return incentivizedPacket;
    }() /* Gets all incentivized packets for a specific channel */
  }, {
    key: "incentivizedPacketsForChannel",
    value: function () {
      var _incentivizedPacketsForChannel = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(params) {
        var options, endpoint;
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                options = {
                  params: {}
                };
                if (typeof (params === null || params === void 0 ? void 0 : params.pagination) !== "undefined") {
                  (0, _helpers.setPaginationParams)(options, params.pagination);
                }
                if (typeof (params === null || params === void 0 ? void 0 : params.queryHeight) !== "undefined") {
                  options.params.query_height = params.queryHeight;
                }
                endpoint = "ibc/apps/fee/v1/channels/".concat(params.channelId, "/ports/").concat(params.portId, "/incentivized_packets");
                _context3.next = 6;
                return this.req.get(endpoint, options);
              case 6:
                return _context3.abrupt("return", _context3.sent);
              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));
      function incentivizedPacketsForChannel(_x3) {
        return _incentivizedPacketsForChannel.apply(this, arguments);
      }
      return incentivizedPacketsForChannel;
    }() /* TotalRecvFees returns the total receive fees for a packet given its identifier */
  }, {
    key: "totalRecvFees",
    value: function () {
      var _totalRecvFees = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(params) {
        var options, endpoint;
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                options = {
                  params: {}
                };
                if (typeof (params === null || params === void 0 ? void 0 : params.packetId) !== "undefined") {
                  options.params.packet_id = params.packetId;
                }
                endpoint = "ibc/apps/fee/v1/channels/".concat(params.packetId.channel_id, "/ports/").concat(params.packetId.port_id, "/sequences/").concat(params.packetId.sequence, "/total_recv_fees");
                _context4.next = 5;
                return this.req.get(endpoint, options);
              case 5:
                return _context4.abrupt("return", _context4.sent);
              case 6:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));
      function totalRecvFees(_x4) {
        return _totalRecvFees.apply(this, arguments);
      }
      return totalRecvFees;
    }() /* TotalAckFees returns the total acknowledgement fees for a packet given its identifier */
  }, {
    key: "totalAckFees",
    value: function () {
      var _totalAckFees = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5(params) {
        var options, endpoint;
        return _regenerator["default"].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                options = {
                  params: {}
                };
                if (typeof (params === null || params === void 0 ? void 0 : params.packetId) !== "undefined") {
                  options.params.packet_id = params.packetId;
                }
                endpoint = "ibc/apps/fee/v1/channels/".concat(params.packetId.channel_id, "/ports/").concat(params.packetId.port_id, "/sequences/").concat(params.packetId.sequence, "/total_ack_fees");
                _context5.next = 5;
                return this.req.get(endpoint, options);
              case 5:
                return _context5.abrupt("return", _context5.sent);
              case 6:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));
      function totalAckFees(_x5) {
        return _totalAckFees.apply(this, arguments);
      }
      return totalAckFees;
    }() /* TotalTimeoutFees returns the total timeout fees for a packet given its identifier */
  }, {
    key: "totalTimeoutFees",
    value: function () {
      var _totalTimeoutFees = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee6(params) {
        var options, endpoint;
        return _regenerator["default"].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                options = {
                  params: {}
                };
                if (typeof (params === null || params === void 0 ? void 0 : params.packetId) !== "undefined") {
                  options.params.packet_id = params.packetId;
                }
                endpoint = "ibc/apps/fee/v1/channels/".concat(params.packetId.channel_id, "/ports/").concat(params.packetId.port_id, "/sequences/").concat(params.packetId.sequence, "/total_timeout_fees");
                _context6.next = 5;
                return this.req.get(endpoint, options);
              case 5:
                return _context6.abrupt("return", _context6.sent);
              case 6:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));
      function totalTimeoutFees(_x6) {
        return _totalTimeoutFees.apply(this, arguments);
      }
      return totalTimeoutFees;
    }() /* Payee returns the registered payee address for a specific channel given the relayer address */
  }, {
    key: "payee",
    value: function () {
      var _payee = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee7(params) {
        var endpoint;
        return _regenerator["default"].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                endpoint = "ibc/apps/fee/v1/channels/".concat(params.channelId, "/relayers/").concat(params.relayer, "/payee");
                _context7.next = 3;
                return this.req.get(endpoint);
              case 3:
                return _context7.abrupt("return", _context7.sent);
              case 4:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));
      function payee(_x7) {
        return _payee.apply(this, arguments);
      }
      return payee;
    }() /* CounterpartyPayee returns the registered counterparty payee for forward relaying */
  }, {
    key: "counterpartyPayee",
    value: function () {
      var _counterpartyPayee = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee8(params) {
        var endpoint;
        return _regenerator["default"].wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                endpoint = "ibc/apps/fee/v1/channels/".concat(params.channelId, "/relayers/").concat(params.relayer, "/counterparty_payee");
                _context8.next = 3;
                return this.req.get(endpoint);
              case 3:
                return _context8.abrupt("return", _context8.sent);
              case 4:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));
      function counterpartyPayee(_x8) {
        return _counterpartyPayee.apply(this, arguments);
      }
      return counterpartyPayee;
    }() /* FeeEnabledChannels returns a list of all fee enabled channels */
  }, {
    key: "feeEnabledChannels",
    value: function () {
      var _feeEnabledChannels = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee9(params) {
        var options, endpoint;
        return _regenerator["default"].wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                options = {
                  params: {}
                };
                if (typeof (params === null || params === void 0 ? void 0 : params.pagination) !== "undefined") {
                  (0, _helpers.setPaginationParams)(options, params.pagination);
                }
                if (typeof (params === null || params === void 0 ? void 0 : params.queryHeight) !== "undefined") {
                  options.params.query_height = params.queryHeight;
                }
                endpoint = "ibc/apps/fee/v1/fee_enabled";
                _context9.next = 6;
                return this.req.get(endpoint, options);
              case 6:
                return _context9.abrupt("return", _context9.sent);
              case 7:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));
      function feeEnabledChannels(_x9) {
        return _feeEnabledChannels.apply(this, arguments);
      }
      return feeEnabledChannels;
    }() /* FeeEnabledChannel returns true if the provided port and channel identifiers belong to a fee enabled channel */
  }, {
    key: "feeEnabledChannel",
    value: function () {
      var _feeEnabledChannel = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee10(params) {
        var endpoint;
        return _regenerator["default"].wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                endpoint = "ibc/apps/fee/v1/channels/".concat(params.channelId, "/ports/").concat(params.portId, "/fee_enabled");
                _context10.next = 3;
                return this.req.get(endpoint);
              case 3:
                return _context10.abrupt("return", _context10.sent);
              case 4:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));
      function feeEnabledChannel(_x10) {
        return _feeEnabledChannel.apply(this, arguments);
      }
      return feeEnabledChannel;
    }()
  }]);
  return LCDQueryClient;
}();
exports.LCDQueryClient = LCDQueryClient;