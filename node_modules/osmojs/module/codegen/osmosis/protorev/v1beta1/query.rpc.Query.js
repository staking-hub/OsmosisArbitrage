import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import * as _m0 from "protobufjs/minimal";
import { createProtobufRpcClient } from "@cosmjs/stargate";
import { QueryParamsRequest, QueryParamsResponse, QueryGetProtoRevNumberOfTradesRequest, QueryGetProtoRevNumberOfTradesResponse, QueryGetProtoRevProfitsByDenomRequest, QueryGetProtoRevProfitsByDenomResponse, QueryGetProtoRevAllProfitsRequest, QueryGetProtoRevAllProfitsResponse, QueryGetProtoRevStatisticsByRouteRequest, QueryGetProtoRevStatisticsByRouteResponse, QueryGetProtoRevAllRouteStatisticsRequest, QueryGetProtoRevAllRouteStatisticsResponse, QueryGetProtoRevTokenPairArbRoutesRequest, QueryGetProtoRevTokenPairArbRoutesResponse, QueryGetProtoRevAdminAccountRequest, QueryGetProtoRevAdminAccountResponse, QueryGetProtoRevDeveloperAccountRequest, QueryGetProtoRevDeveloperAccountResponse, QueryGetProtoRevPoolWeightsRequest, QueryGetProtoRevPoolWeightsResponse, QueryGetProtoRevMaxPoolPointsPerTxRequest, QueryGetProtoRevMaxPoolPointsPerTxResponse, QueryGetProtoRevMaxPoolPointsPerBlockRequest, QueryGetProtoRevMaxPoolPointsPerBlockResponse, QueryGetProtoRevBaseDenomsRequest, QueryGetProtoRevBaseDenomsResponse, QueryGetProtoRevEnabledRequest, QueryGetProtoRevEnabledResponse } from "./query";
/** Query defines the gRPC querier service. */

export class QueryClientImpl {
  constructor(rpc) {
    _defineProperty(this, "rpc", void 0);
    this.rpc = rpc;
    this.params = this.params.bind(this);
    this.getProtoRevNumberOfTrades = this.getProtoRevNumberOfTrades.bind(this);
    this.getProtoRevProfitsByDenom = this.getProtoRevProfitsByDenom.bind(this);
    this.getProtoRevAllProfits = this.getProtoRevAllProfits.bind(this);
    this.getProtoRevStatisticsByRoute = this.getProtoRevStatisticsByRoute.bind(this);
    this.getProtoRevAllRouteStatistics = this.getProtoRevAllRouteStatistics.bind(this);
    this.getProtoRevTokenPairArbRoutes = this.getProtoRevTokenPairArbRoutes.bind(this);
    this.getProtoRevAdminAccount = this.getProtoRevAdminAccount.bind(this);
    this.getProtoRevDeveloperAccount = this.getProtoRevDeveloperAccount.bind(this);
    this.getProtoRevPoolWeights = this.getProtoRevPoolWeights.bind(this);
    this.getProtoRevMaxPoolPointsPerTx = this.getProtoRevMaxPoolPointsPerTx.bind(this);
    this.getProtoRevMaxPoolPointsPerBlock = this.getProtoRevMaxPoolPointsPerBlock.bind(this);
    this.getProtoRevBaseDenoms = this.getProtoRevBaseDenoms.bind(this);
    this.getProtoRevEnabled = this.getProtoRevEnabled.bind(this);
  }
  params(request = {}) {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request("osmosis.protorev.v1beta1.Query", "Params", data);
    return promise.then(data => QueryParamsResponse.decode(new _m0.Reader(data)));
  }
  getProtoRevNumberOfTrades(request = {}) {
    const data = QueryGetProtoRevNumberOfTradesRequest.encode(request).finish();
    const promise = this.rpc.request("osmosis.protorev.v1beta1.Query", "GetProtoRevNumberOfTrades", data);
    return promise.then(data => QueryGetProtoRevNumberOfTradesResponse.decode(new _m0.Reader(data)));
  }
  getProtoRevProfitsByDenom(request) {
    const data = QueryGetProtoRevProfitsByDenomRequest.encode(request).finish();
    const promise = this.rpc.request("osmosis.protorev.v1beta1.Query", "GetProtoRevProfitsByDenom", data);
    return promise.then(data => QueryGetProtoRevProfitsByDenomResponse.decode(new _m0.Reader(data)));
  }
  getProtoRevAllProfits(request = {}) {
    const data = QueryGetProtoRevAllProfitsRequest.encode(request).finish();
    const promise = this.rpc.request("osmosis.protorev.v1beta1.Query", "GetProtoRevAllProfits", data);
    return promise.then(data => QueryGetProtoRevAllProfitsResponse.decode(new _m0.Reader(data)));
  }
  getProtoRevStatisticsByRoute(request) {
    const data = QueryGetProtoRevStatisticsByRouteRequest.encode(request).finish();
    const promise = this.rpc.request("osmosis.protorev.v1beta1.Query", "GetProtoRevStatisticsByRoute", data);
    return promise.then(data => QueryGetProtoRevStatisticsByRouteResponse.decode(new _m0.Reader(data)));
  }
  getProtoRevAllRouteStatistics(request = {}) {
    const data = QueryGetProtoRevAllRouteStatisticsRequest.encode(request).finish();
    const promise = this.rpc.request("osmosis.protorev.v1beta1.Query", "GetProtoRevAllRouteStatistics", data);
    return promise.then(data => QueryGetProtoRevAllRouteStatisticsResponse.decode(new _m0.Reader(data)));
  }
  getProtoRevTokenPairArbRoutes(request = {}) {
    const data = QueryGetProtoRevTokenPairArbRoutesRequest.encode(request).finish();
    const promise = this.rpc.request("osmosis.protorev.v1beta1.Query", "GetProtoRevTokenPairArbRoutes", data);
    return promise.then(data => QueryGetProtoRevTokenPairArbRoutesResponse.decode(new _m0.Reader(data)));
  }
  getProtoRevAdminAccount(request = {}) {
    const data = QueryGetProtoRevAdminAccountRequest.encode(request).finish();
    const promise = this.rpc.request("osmosis.protorev.v1beta1.Query", "GetProtoRevAdminAccount", data);
    return promise.then(data => QueryGetProtoRevAdminAccountResponse.decode(new _m0.Reader(data)));
  }
  getProtoRevDeveloperAccount(request = {}) {
    const data = QueryGetProtoRevDeveloperAccountRequest.encode(request).finish();
    const promise = this.rpc.request("osmosis.protorev.v1beta1.Query", "GetProtoRevDeveloperAccount", data);
    return promise.then(data => QueryGetProtoRevDeveloperAccountResponse.decode(new _m0.Reader(data)));
  }
  getProtoRevPoolWeights(request = {}) {
    const data = QueryGetProtoRevPoolWeightsRequest.encode(request).finish();
    const promise = this.rpc.request("osmosis.protorev.v1beta1.Query", "GetProtoRevPoolWeights", data);
    return promise.then(data => QueryGetProtoRevPoolWeightsResponse.decode(new _m0.Reader(data)));
  }
  getProtoRevMaxPoolPointsPerTx(request = {}) {
    const data = QueryGetProtoRevMaxPoolPointsPerTxRequest.encode(request).finish();
    const promise = this.rpc.request("osmosis.protorev.v1beta1.Query", "GetProtoRevMaxPoolPointsPerTx", data);
    return promise.then(data => QueryGetProtoRevMaxPoolPointsPerTxResponse.decode(new _m0.Reader(data)));
  }
  getProtoRevMaxPoolPointsPerBlock(request = {}) {
    const data = QueryGetProtoRevMaxPoolPointsPerBlockRequest.encode(request).finish();
    const promise = this.rpc.request("osmosis.protorev.v1beta1.Query", "GetProtoRevMaxPoolPointsPerBlock", data);
    return promise.then(data => QueryGetProtoRevMaxPoolPointsPerBlockResponse.decode(new _m0.Reader(data)));
  }
  getProtoRevBaseDenoms(request = {}) {
    const data = QueryGetProtoRevBaseDenomsRequest.encode(request).finish();
    const promise = this.rpc.request("osmosis.protorev.v1beta1.Query", "GetProtoRevBaseDenoms", data);
    return promise.then(data => QueryGetProtoRevBaseDenomsResponse.decode(new _m0.Reader(data)));
  }
  getProtoRevEnabled(request = {}) {
    const data = QueryGetProtoRevEnabledRequest.encode(request).finish();
    const promise = this.rpc.request("osmosis.protorev.v1beta1.Query", "GetProtoRevEnabled", data);
    return promise.then(data => QueryGetProtoRevEnabledResponse.decode(new _m0.Reader(data)));
  }
}
export const createRpcQueryExtension = base => {
  const rpc = createProtobufRpcClient(base);
  const queryService = new QueryClientImpl(rpc);
  return {
    params(request) {
      return queryService.params(request);
    },
    getProtoRevNumberOfTrades(request) {
      return queryService.getProtoRevNumberOfTrades(request);
    },
    getProtoRevProfitsByDenom(request) {
      return queryService.getProtoRevProfitsByDenom(request);
    },
    getProtoRevAllProfits(request) {
      return queryService.getProtoRevAllProfits(request);
    },
    getProtoRevStatisticsByRoute(request) {
      return queryService.getProtoRevStatisticsByRoute(request);
    },
    getProtoRevAllRouteStatistics(request) {
      return queryService.getProtoRevAllRouteStatistics(request);
    },
    getProtoRevTokenPairArbRoutes(request) {
      return queryService.getProtoRevTokenPairArbRoutes(request);
    },
    getProtoRevAdminAccount(request) {
      return queryService.getProtoRevAdminAccount(request);
    },
    getProtoRevDeveloperAccount(request) {
      return queryService.getProtoRevDeveloperAccount(request);
    },
    getProtoRevPoolWeights(request) {
      return queryService.getProtoRevPoolWeights(request);
    },
    getProtoRevMaxPoolPointsPerTx(request) {
      return queryService.getProtoRevMaxPoolPointsPerTx(request);
    },
    getProtoRevMaxPoolPointsPerBlock(request) {
      return queryService.getProtoRevMaxPoolPointsPerBlock(request);
    },
    getProtoRevBaseDenoms(request) {
      return queryService.getProtoRevBaseDenoms(request);
    },
    getProtoRevEnabled(request) {
      return queryService.getProtoRevEnabled(request);
    }
  };
};