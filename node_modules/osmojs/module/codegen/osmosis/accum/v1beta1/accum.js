import { DecCoin } from "../../../cosmos/base/v1beta1/coin";
import * as _m0 from "protobufjs/minimal";
function createBaseAccumulatorContent() {
  return {
    accumValue: [],
    totalShares: ""
  };
}
export const AccumulatorContent = {
  typeUrl: "/osmosis.accum.v1beta1.AccumulatorContent",
  encode(message, writer = _m0.Writer.create()) {
    for (const v of message.accumValue) {
      DecCoin.encode(v, writer.uint32(10).fork()).ldelim();
    }
    if (message.totalShares !== "") {
      writer.uint32(18).string(message.totalShares);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccumulatorContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.accumValue.push(DecCoin.decode(reader, reader.uint32()));
          break;
        case 2:
          message.totalShares = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$accumValue, _object$totalShares;
    const message = createBaseAccumulatorContent();
    message.accumValue = ((_object$accumValue = object.accumValue) === null || _object$accumValue === void 0 ? void 0 : _object$accumValue.map(e => DecCoin.fromPartial(e))) || [];
    message.totalShares = (_object$totalShares = object.totalShares) !== null && _object$totalShares !== void 0 ? _object$totalShares : "";
    return message;
  },
  fromAmino(object) {
    return {
      accumValue: Array.isArray(object === null || object === void 0 ? void 0 : object.accum_value) ? object.accum_value.map(e => DecCoin.fromAmino(e)) : [],
      totalShares: object.total_shares
    };
  },
  toAmino(message) {
    const obj = {};
    if (message.accumValue) {
      obj.accum_value = message.accumValue.map(e => e ? DecCoin.toAmino(e) : undefined);
    } else {
      obj.accum_value = [];
    }
    obj.total_shares = message.totalShares;
    return obj;
  },
  fromAminoMsg(object) {
    return AccumulatorContent.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/accum/accumulator-content",
      value: AccumulatorContent.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return AccumulatorContent.decode(message.value);
  },
  toProto(message) {
    return AccumulatorContent.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.accum.v1beta1.AccumulatorContent",
      value: AccumulatorContent.encode(message).finish()
    };
  }
};
function createBaseOptions() {
  return {};
}
export const Options = {
  typeUrl: "/osmosis.accum.v1beta1.Options",
  encode(_, writer = _m0.Writer.create()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(_) {
    const message = createBaseOptions();
    return message;
  },
  fromAmino(_) {
    return {};
  },
  toAmino(_) {
    const obj = {};
    return obj;
  },
  fromAminoMsg(object) {
    return Options.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/accum/options",
      value: Options.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return Options.decode(message.value);
  },
  toProto(message) {
    return Options.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.accum.v1beta1.Options",
      value: Options.encode(message).finish()
    };
  }
};
function createBaseRecord() {
  return {
    numShares: "",
    initAccumValue: [],
    unclaimedRewards: [],
    options: undefined
  };
}
export const Record = {
  typeUrl: "/osmosis.accum.v1beta1.Record",
  encode(message, writer = _m0.Writer.create()) {
    if (message.numShares !== "") {
      writer.uint32(10).string(message.numShares);
    }
    for (const v of message.initAccumValue) {
      DecCoin.encode(v, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.unclaimedRewards) {
      DecCoin.encode(v, writer.uint32(26).fork()).ldelim();
    }
    if (message.options !== undefined) {
      Options.encode(message.options, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.numShares = reader.string();
          break;
        case 2:
          message.initAccumValue.push(DecCoin.decode(reader, reader.uint32()));
          break;
        case 3:
          message.unclaimedRewards.push(DecCoin.decode(reader, reader.uint32()));
          break;
        case 4:
          message.options = Options.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$numShares, _object$initAccumValu, _object$unclaimedRewa;
    const message = createBaseRecord();
    message.numShares = (_object$numShares = object.numShares) !== null && _object$numShares !== void 0 ? _object$numShares : "";
    message.initAccumValue = ((_object$initAccumValu = object.initAccumValue) === null || _object$initAccumValu === void 0 ? void 0 : _object$initAccumValu.map(e => DecCoin.fromPartial(e))) || [];
    message.unclaimedRewards = ((_object$unclaimedRewa = object.unclaimedRewards) === null || _object$unclaimedRewa === void 0 ? void 0 : _object$unclaimedRewa.map(e => DecCoin.fromPartial(e))) || [];
    message.options = object.options !== undefined && object.options !== null ? Options.fromPartial(object.options) : undefined;
    return message;
  },
  fromAmino(object) {
    return {
      numShares: object.num_shares,
      initAccumValue: Array.isArray(object === null || object === void 0 ? void 0 : object.init_accum_value) ? object.init_accum_value.map(e => DecCoin.fromAmino(e)) : [],
      unclaimedRewards: Array.isArray(object === null || object === void 0 ? void 0 : object.unclaimed_rewards) ? object.unclaimed_rewards.map(e => DecCoin.fromAmino(e)) : [],
      options: object !== null && object !== void 0 && object.options ? Options.fromAmino(object.options) : undefined
    };
  },
  toAmino(message) {
    const obj = {};
    obj.num_shares = message.numShares;
    if (message.initAccumValue) {
      obj.init_accum_value = message.initAccumValue.map(e => e ? DecCoin.toAmino(e) : undefined);
    } else {
      obj.init_accum_value = [];
    }
    if (message.unclaimedRewards) {
      obj.unclaimed_rewards = message.unclaimedRewards.map(e => e ? DecCoin.toAmino(e) : undefined);
    } else {
      obj.unclaimed_rewards = [];
    }
    obj.options = message.options ? Options.toAmino(message.options) : undefined;
    return obj;
  },
  fromAminoMsg(object) {
    return Record.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/accum/record",
      value: Record.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return Record.decode(message.value);
  },
  toProto(message) {
    return Record.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.accum.v1beta1.Record",
      value: Record.encode(message).finish()
    };
  }
};