import { Long } from "../../../../helpers";
import * as _m0 from "protobufjs/minimal";
function createBaseCosmWasmPool() {
  return {
    $typeUrl: "/osmosis.cosmwasmpool.v1beta1.CosmWasmPool",
    poolAddress: "",
    contractAddress: "",
    poolId: Long.UZERO,
    codeId: Long.UZERO
  };
}
export const CosmWasmPool = {
  typeUrl: "/osmosis.cosmwasmpool.v1beta1.CosmWasmPool",
  encode(message, writer = _m0.Writer.create()) {
    if (message.poolAddress !== "") {
      writer.uint32(10).string(message.poolAddress);
    }
    if (message.contractAddress !== "") {
      writer.uint32(18).string(message.contractAddress);
    }
    if (!message.poolId.isZero()) {
      writer.uint32(24).uint64(message.poolId);
    }
    if (!message.codeId.isZero()) {
      writer.uint32(32).uint64(message.codeId);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCosmWasmPool();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.poolAddress = reader.string();
          break;
        case 2:
          message.contractAddress = reader.string();
          break;
        case 3:
          message.poolId = reader.uint64();
          break;
        case 4:
          message.codeId = reader.uint64();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$poolAddress, _object$contractAddre;
    const message = createBaseCosmWasmPool();
    message.poolAddress = (_object$poolAddress = object.poolAddress) !== null && _object$poolAddress !== void 0 ? _object$poolAddress : "";
    message.contractAddress = (_object$contractAddre = object.contractAddress) !== null && _object$contractAddre !== void 0 ? _object$contractAddre : "";
    message.poolId = object.poolId !== undefined && object.poolId !== null ? Long.fromValue(object.poolId) : Long.UZERO;
    message.codeId = object.codeId !== undefined && object.codeId !== null ? Long.fromValue(object.codeId) : Long.UZERO;
    return message;
  },
  fromAmino(object) {
    return {
      poolAddress: object.pool_address,
      contractAddress: object.contract_address,
      poolId: Long.fromString(object.pool_id),
      codeId: Long.fromString(object.code_id)
    };
  },
  toAmino(message) {
    const obj = {};
    obj.pool_address = message.poolAddress;
    obj.contract_address = message.contractAddress;
    obj.pool_id = message.poolId ? message.poolId.toString() : undefined;
    obj.code_id = message.codeId ? message.codeId.toString() : undefined;
    return obj;
  },
  fromAminoMsg(object) {
    return CosmWasmPool.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/cosmwasmpool/cosm-wasm-pool",
      value: CosmWasmPool.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return CosmWasmPool.decode(message.value);
  },
  toProto(message) {
    return CosmWasmPool.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.cosmwasmpool.v1beta1.CosmWasmPool",
      value: CosmWasmPool.encode(message).finish()
    };
  }
};