import { BalancerToConcentratedPoolLink } from "./genesis";
import * as _m0 from "protobufjs/minimal";
/**
 * ReplaceMigrationRecordsProposal is a gov Content type for updating the
 * migration records. If a ReplaceMigrationRecordsProposal passes, the
 * proposalâ€™s records override the existing MigrationRecords set in the module.
 * Each record specifies a single connection between a single balancer pool and
 * a single concentrated pool.
 */

function createBaseReplaceMigrationRecordsProposal() {
  return {
    title: "",
    description: "",
    records: []
  };
}
export const ReplaceMigrationRecordsProposal = {
  typeUrl: "/osmosis.gamm.v1beta1.ReplaceMigrationRecordsProposal",
  encode(message, writer = _m0.Writer.create()) {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    for (const v of message.records) {
      BalancerToConcentratedPoolLink.encode(v, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReplaceMigrationRecordsProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.title = reader.string();
          break;
        case 2:
          message.description = reader.string();
          break;
        case 3:
          message.records.push(BalancerToConcentratedPoolLink.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$title, _object$description, _object$records;
    const message = createBaseReplaceMigrationRecordsProposal();
    message.title = (_object$title = object.title) !== null && _object$title !== void 0 ? _object$title : "";
    message.description = (_object$description = object.description) !== null && _object$description !== void 0 ? _object$description : "";
    message.records = ((_object$records = object.records) === null || _object$records === void 0 ? void 0 : _object$records.map(e => BalancerToConcentratedPoolLink.fromPartial(e))) || [];
    return message;
  },
  fromAmino(object) {
    return {
      title: object.title,
      description: object.description,
      records: Array.isArray(object === null || object === void 0 ? void 0 : object.records) ? object.records.map(e => BalancerToConcentratedPoolLink.fromAmino(e)) : []
    };
  },
  toAmino(message) {
    const obj = {};
    obj.title = message.title;
    obj.description = message.description;
    if (message.records) {
      obj.records = message.records.map(e => e ? BalancerToConcentratedPoolLink.toAmino(e) : undefined);
    } else {
      obj.records = [];
    }
    return obj;
  },
  fromAminoMsg(object) {
    return ReplaceMigrationRecordsProposal.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/gamm/replace-migration-records-proposal",
      value: ReplaceMigrationRecordsProposal.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return ReplaceMigrationRecordsProposal.decode(message.value);
  },
  toProto(message) {
    return ReplaceMigrationRecordsProposal.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.gamm.v1beta1.ReplaceMigrationRecordsProposal",
      value: ReplaceMigrationRecordsProposal.encode(message).finish()
    };
  }
};
function createBaseUpdateMigrationRecordsProposal() {
  return {
    title: "",
    description: "",
    records: []
  };
}
export const UpdateMigrationRecordsProposal = {
  typeUrl: "/osmosis.gamm.v1beta1.UpdateMigrationRecordsProposal",
  encode(message, writer = _m0.Writer.create()) {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    for (const v of message.records) {
      BalancerToConcentratedPoolLink.encode(v, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateMigrationRecordsProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.title = reader.string();
          break;
        case 2:
          message.description = reader.string();
          break;
        case 3:
          message.records.push(BalancerToConcentratedPoolLink.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$title2, _object$description2, _object$records2;
    const message = createBaseUpdateMigrationRecordsProposal();
    message.title = (_object$title2 = object.title) !== null && _object$title2 !== void 0 ? _object$title2 : "";
    message.description = (_object$description2 = object.description) !== null && _object$description2 !== void 0 ? _object$description2 : "";
    message.records = ((_object$records2 = object.records) === null || _object$records2 === void 0 ? void 0 : _object$records2.map(e => BalancerToConcentratedPoolLink.fromPartial(e))) || [];
    return message;
  },
  fromAmino(object) {
    return {
      title: object.title,
      description: object.description,
      records: Array.isArray(object === null || object === void 0 ? void 0 : object.records) ? object.records.map(e => BalancerToConcentratedPoolLink.fromAmino(e)) : []
    };
  },
  toAmino(message) {
    const obj = {};
    obj.title = message.title;
    obj.description = message.description;
    if (message.records) {
      obj.records = message.records.map(e => e ? BalancerToConcentratedPoolLink.toAmino(e) : undefined);
    } else {
      obj.records = [];
    }
    return obj;
  },
  fromAminoMsg(object) {
    return UpdateMigrationRecordsProposal.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/gamm/update-migration-records-proposal",
      value: UpdateMigrationRecordsProposal.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return UpdateMigrationRecordsProposal.decode(message.value);
  },
  toProto(message) {
    return UpdateMigrationRecordsProposal.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.gamm.v1beta1.UpdateMigrationRecordsProposal",
      value: UpdateMigrationRecordsProposal.encode(message).finish()
    };
  }
};