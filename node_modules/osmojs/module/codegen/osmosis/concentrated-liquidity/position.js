import { Timestamp } from "../../google/protobuf/timestamp";
import { Coin } from "../../cosmos/base/v1beta1/coin";
import { Long, toTimestamp, fromTimestamp } from "../../helpers";
import * as _m0 from "protobufjs/minimal";
/**
 * Position contains position's id, address, pool id, lower tick, upper tick
 * join time, and liquidity.
 */

function createBasePosition() {
  return {
    positionId: Long.UZERO,
    address: "",
    poolId: Long.UZERO,
    lowerTick: Long.ZERO,
    upperTick: Long.ZERO,
    joinTime: undefined,
    liquidity: ""
  };
}
export const Position = {
  typeUrl: "/osmosis.concentratedliquidity.v1beta1.Position",
  encode(message, writer = _m0.Writer.create()) {
    if (!message.positionId.isZero()) {
      writer.uint32(8).uint64(message.positionId);
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    if (!message.poolId.isZero()) {
      writer.uint32(24).uint64(message.poolId);
    }
    if (!message.lowerTick.isZero()) {
      writer.uint32(32).int64(message.lowerTick);
    }
    if (!message.upperTick.isZero()) {
      writer.uint32(40).int64(message.upperTick);
    }
    if (message.joinTime !== undefined) {
      Timestamp.encode(toTimestamp(message.joinTime), writer.uint32(50).fork()).ldelim();
    }
    if (message.liquidity !== "") {
      writer.uint32(58).string(message.liquidity);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePosition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.positionId = reader.uint64();
          break;
        case 2:
          message.address = reader.string();
          break;
        case 3:
          message.poolId = reader.uint64();
          break;
        case 4:
          message.lowerTick = reader.int64();
          break;
        case 5:
          message.upperTick = reader.int64();
          break;
        case 6:
          message.joinTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          break;
        case 7:
          message.liquidity = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$address, _object$joinTime, _object$liquidity;
    const message = createBasePosition();
    message.positionId = object.positionId !== undefined && object.positionId !== null ? Long.fromValue(object.positionId) : Long.UZERO;
    message.address = (_object$address = object.address) !== null && _object$address !== void 0 ? _object$address : "";
    message.poolId = object.poolId !== undefined && object.poolId !== null ? Long.fromValue(object.poolId) : Long.UZERO;
    message.lowerTick = object.lowerTick !== undefined && object.lowerTick !== null ? Long.fromValue(object.lowerTick) : Long.ZERO;
    message.upperTick = object.upperTick !== undefined && object.upperTick !== null ? Long.fromValue(object.upperTick) : Long.ZERO;
    message.joinTime = (_object$joinTime = object.joinTime) !== null && _object$joinTime !== void 0 ? _object$joinTime : undefined;
    message.liquidity = (_object$liquidity = object.liquidity) !== null && _object$liquidity !== void 0 ? _object$liquidity : "";
    return message;
  },
  fromAmino(object) {
    return {
      positionId: Long.fromString(object.position_id),
      address: object.address,
      poolId: Long.fromString(object.pool_id),
      lowerTick: Long.fromString(object.lower_tick),
      upperTick: Long.fromString(object.upper_tick),
      joinTime: object !== null && object !== void 0 && object.join_time ? Timestamp.fromAmino(object.join_time) : undefined,
      liquidity: object.liquidity
    };
  },
  toAmino(message) {
    const obj = {};
    obj.position_id = message.positionId ? message.positionId.toString() : undefined;
    obj.address = message.address;
    obj.pool_id = message.poolId ? message.poolId.toString() : undefined;
    obj.lower_tick = message.lowerTick ? message.lowerTick.toString() : undefined;
    obj.upper_tick = message.upperTick ? message.upperTick.toString() : undefined;
    obj.join_time = message.joinTime ? Timestamp.toAmino(message.joinTime) : undefined;
    obj.liquidity = message.liquidity;
    return obj;
  },
  fromAminoMsg(object) {
    return Position.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/concentratedliquidity/position",
      value: Position.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return Position.decode(message.value);
  },
  toProto(message) {
    return Position.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.concentratedliquidity.v1beta1.Position",
      value: Position.encode(message).finish()
    };
  }
};
function createBasePositionWithUnderlyingAssetBreakdown() {
  return {
    position: undefined,
    asset0: undefined,
    asset1: undefined
  };
}
export const PositionWithUnderlyingAssetBreakdown = {
  typeUrl: "/osmosis.concentratedliquidity.v1beta1.PositionWithUnderlyingAssetBreakdown",
  encode(message, writer = _m0.Writer.create()) {
    if (message.position !== undefined) {
      Position.encode(message.position, writer.uint32(10).fork()).ldelim();
    }
    if (message.asset0 !== undefined) {
      Coin.encode(message.asset0, writer.uint32(18).fork()).ldelim();
    }
    if (message.asset1 !== undefined) {
      Coin.encode(message.asset1, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePositionWithUnderlyingAssetBreakdown();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.position = Position.decode(reader, reader.uint32());
          break;
        case 2:
          message.asset0 = Coin.decode(reader, reader.uint32());
          break;
        case 3:
          message.asset1 = Coin.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    const message = createBasePositionWithUnderlyingAssetBreakdown();
    message.position = object.position !== undefined && object.position !== null ? Position.fromPartial(object.position) : undefined;
    message.asset0 = object.asset0 !== undefined && object.asset0 !== null ? Coin.fromPartial(object.asset0) : undefined;
    message.asset1 = object.asset1 !== undefined && object.asset1 !== null ? Coin.fromPartial(object.asset1) : undefined;
    return message;
  },
  fromAmino(object) {
    return {
      position: object !== null && object !== void 0 && object.position ? Position.fromAmino(object.position) : undefined,
      asset0: object !== null && object !== void 0 && object.asset0 ? Coin.fromAmino(object.asset0) : undefined,
      asset1: object !== null && object !== void 0 && object.asset1 ? Coin.fromAmino(object.asset1) : undefined
    };
  },
  toAmino(message) {
    const obj = {};
    obj.position = message.position ? Position.toAmino(message.position) : undefined;
    obj.asset0 = message.asset0 ? Coin.toAmino(message.asset0) : undefined;
    obj.asset1 = message.asset1 ? Coin.toAmino(message.asset1) : undefined;
    return obj;
  },
  fromAminoMsg(object) {
    return PositionWithUnderlyingAssetBreakdown.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/concentratedliquidity/position-with-underlying-asset-breakdown",
      value: PositionWithUnderlyingAssetBreakdown.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return PositionWithUnderlyingAssetBreakdown.decode(message.value);
  },
  toProto(message) {
    return PositionWithUnderlyingAssetBreakdown.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.concentratedliquidity.v1beta1.PositionWithUnderlyingAssetBreakdown",
      value: PositionWithUnderlyingAssetBreakdown.encode(message).finish()
    };
  }
};