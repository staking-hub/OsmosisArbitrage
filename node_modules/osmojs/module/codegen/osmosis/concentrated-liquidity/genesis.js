import { TickInfo } from "./tickInfo";
import { Any } from "../../google/protobuf/any";
import { IncentiveRecord } from "./incentive_record";
import { Params } from "./params";
import { Position } from "./position";
import { AccumulatorContent } from "../accum/v1beta1/accum";
import { Pool as Pool1 } from "./pool";
import { CosmWasmPool } from "../cosmwasmpool/v1beta1/model/pool";
import { Pool as Pool2 } from "../gamm/pool-models/balancer/balancerPool";
import { Pool as Pool3 } from "../gamm/pool-models/stableswap/stableswap_pool";
import { Long } from "../../helpers";
import * as _m0 from "protobufjs/minimal";
/**
 * FullTick contains tick index and pool id along with other tick model
 * information.
 */

function createBaseFullTick() {
  return {
    poolId: Long.UZERO,
    tickIndex: Long.ZERO,
    info: undefined
  };
}
export const FullTick = {
  typeUrl: "/osmosis.concentratedliquidity.v1beta1.FullTick",
  encode(message, writer = _m0.Writer.create()) {
    if (!message.poolId.isZero()) {
      writer.uint32(8).uint64(message.poolId);
    }
    if (!message.tickIndex.isZero()) {
      writer.uint32(16).int64(message.tickIndex);
    }
    if (message.info !== undefined) {
      TickInfo.encode(message.info, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFullTick();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.poolId = reader.uint64();
          break;
        case 2:
          message.tickIndex = reader.int64();
          break;
        case 3:
          message.info = TickInfo.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    const message = createBaseFullTick();
    message.poolId = object.poolId !== undefined && object.poolId !== null ? Long.fromValue(object.poolId) : Long.UZERO;
    message.tickIndex = object.tickIndex !== undefined && object.tickIndex !== null ? Long.fromValue(object.tickIndex) : Long.ZERO;
    message.info = object.info !== undefined && object.info !== null ? TickInfo.fromPartial(object.info) : undefined;
    return message;
  },
  fromAmino(object) {
    return {
      poolId: Long.fromString(object.pool_id),
      tickIndex: Long.fromString(object.tick_index),
      info: object !== null && object !== void 0 && object.info ? TickInfo.fromAmino(object.info) : undefined
    };
  },
  toAmino(message) {
    const obj = {};
    obj.pool_id = message.poolId ? message.poolId.toString() : undefined;
    obj.tick_index = message.tickIndex ? message.tickIndex.toString() : undefined;
    obj.info = message.info ? TickInfo.toAmino(message.info) : undefined;
    return obj;
  },
  fromAminoMsg(object) {
    return FullTick.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/concentratedliquidity/full-tick",
      value: FullTick.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return FullTick.decode(message.value);
  },
  toProto(message) {
    return FullTick.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.concentratedliquidity.v1beta1.FullTick",
      value: FullTick.encode(message).finish()
    };
  }
};
function createBasePoolData() {
  return {
    pool: undefined,
    ticks: [],
    feeAccumulator: undefined,
    incentivesAccumulators: [],
    incentiveRecords: []
  };
}
export const PoolData = {
  typeUrl: "/osmosis.concentratedliquidity.v1beta1.PoolData",
  encode(message, writer = _m0.Writer.create()) {
    if (message.pool !== undefined) {
      Any.encode(message.pool, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.ticks) {
      FullTick.encode(v, writer.uint32(18).fork()).ldelim();
    }
    if (message.feeAccumulator !== undefined) {
      AccumObject.encode(message.feeAccumulator, writer.uint32(26).fork()).ldelim();
    }
    for (const v of message.incentivesAccumulators) {
      AccumObject.encode(v, writer.uint32(34).fork()).ldelim();
    }
    for (const v of message.incentiveRecords) {
      IncentiveRecord.encode(v, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePoolData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.pool = PoolI_InterfaceDecoder(reader);
          break;
        case 2:
          message.ticks.push(FullTick.decode(reader, reader.uint32()));
          break;
        case 3:
          message.feeAccumulator = AccumObject.decode(reader, reader.uint32());
          break;
        case 4:
          message.incentivesAccumulators.push(AccumObject.decode(reader, reader.uint32()));
          break;
        case 5:
          message.incentiveRecords.push(IncentiveRecord.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$ticks, _object$incentivesAcc, _object$incentiveReco;
    const message = createBasePoolData();
    message.pool = object.pool !== undefined && object.pool !== null ? Any.fromPartial(object.pool) : undefined;
    message.ticks = ((_object$ticks = object.ticks) === null || _object$ticks === void 0 ? void 0 : _object$ticks.map(e => FullTick.fromPartial(e))) || [];
    message.feeAccumulator = object.feeAccumulator !== undefined && object.feeAccumulator !== null ? AccumObject.fromPartial(object.feeAccumulator) : undefined;
    message.incentivesAccumulators = ((_object$incentivesAcc = object.incentivesAccumulators) === null || _object$incentivesAcc === void 0 ? void 0 : _object$incentivesAcc.map(e => AccumObject.fromPartial(e))) || [];
    message.incentiveRecords = ((_object$incentiveReco = object.incentiveRecords) === null || _object$incentiveReco === void 0 ? void 0 : _object$incentiveReco.map(e => IncentiveRecord.fromPartial(e))) || [];
    return message;
  },
  fromAmino(object) {
    return {
      pool: object !== null && object !== void 0 && object.pool ? PoolI_FromAmino(object.pool) : undefined,
      ticks: Array.isArray(object === null || object === void 0 ? void 0 : object.ticks) ? object.ticks.map(e => FullTick.fromAmino(e)) : [],
      feeAccumulator: object !== null && object !== void 0 && object.fee_accumulator ? AccumObject.fromAmino(object.fee_accumulator) : undefined,
      incentivesAccumulators: Array.isArray(object === null || object === void 0 ? void 0 : object.incentives_accumulators) ? object.incentives_accumulators.map(e => AccumObject.fromAmino(e)) : [],
      incentiveRecords: Array.isArray(object === null || object === void 0 ? void 0 : object.incentive_records) ? object.incentive_records.map(e => IncentiveRecord.fromAmino(e)) : []
    };
  },
  toAmino(message) {
    const obj = {};
    obj.pool = message.pool ? PoolI_ToAmino(message.pool) : undefined;
    if (message.ticks) {
      obj.ticks = message.ticks.map(e => e ? FullTick.toAmino(e) : undefined);
    } else {
      obj.ticks = [];
    }
    obj.fee_accumulator = message.feeAccumulator ? AccumObject.toAmino(message.feeAccumulator) : undefined;
    if (message.incentivesAccumulators) {
      obj.incentives_accumulators = message.incentivesAccumulators.map(e => e ? AccumObject.toAmino(e) : undefined);
    } else {
      obj.incentives_accumulators = [];
    }
    if (message.incentiveRecords) {
      obj.incentive_records = message.incentiveRecords.map(e => e ? IncentiveRecord.toAmino(e) : undefined);
    } else {
      obj.incentive_records = [];
    }
    return obj;
  },
  fromAminoMsg(object) {
    return PoolData.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/concentratedliquidity/pool-data",
      value: PoolData.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return PoolData.decode(message.value);
  },
  toProto(message) {
    return PoolData.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.concentratedliquidity.v1beta1.PoolData",
      value: PoolData.encode(message).finish()
    };
  }
};
function createBaseGenesisState() {
  return {
    params: undefined,
    poolData: [],
    positions: [],
    nextPositionId: Long.UZERO
  };
}
export const GenesisState = {
  typeUrl: "/osmosis.concentratedliquidity.v1beta1.GenesisState",
  encode(message, writer = _m0.Writer.create()) {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.poolData) {
      PoolData.encode(v, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.positions) {
      Position.encode(v, writer.uint32(26).fork()).ldelim();
    }
    if (!message.nextPositionId.isZero()) {
      writer.uint32(32).uint64(message.nextPositionId);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.params = Params.decode(reader, reader.uint32());
          break;
        case 2:
          message.poolData.push(PoolData.decode(reader, reader.uint32()));
          break;
        case 3:
          message.positions.push(Position.decode(reader, reader.uint32()));
          break;
        case 4:
          message.nextPositionId = reader.uint64();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$poolData, _object$positions;
    const message = createBaseGenesisState();
    message.params = object.params !== undefined && object.params !== null ? Params.fromPartial(object.params) : undefined;
    message.poolData = ((_object$poolData = object.poolData) === null || _object$poolData === void 0 ? void 0 : _object$poolData.map(e => PoolData.fromPartial(e))) || [];
    message.positions = ((_object$positions = object.positions) === null || _object$positions === void 0 ? void 0 : _object$positions.map(e => Position.fromPartial(e))) || [];
    message.nextPositionId = object.nextPositionId !== undefined && object.nextPositionId !== null ? Long.fromValue(object.nextPositionId) : Long.UZERO;
    return message;
  },
  fromAmino(object) {
    return {
      params: object !== null && object !== void 0 && object.params ? Params.fromAmino(object.params) : undefined,
      poolData: Array.isArray(object === null || object === void 0 ? void 0 : object.pool_data) ? object.pool_data.map(e => PoolData.fromAmino(e)) : [],
      positions: Array.isArray(object === null || object === void 0 ? void 0 : object.positions) ? object.positions.map(e => Position.fromAmino(e)) : [],
      nextPositionId: Long.fromString(object.next_position_id)
    };
  },
  toAmino(message) {
    const obj = {};
    obj.params = message.params ? Params.toAmino(message.params) : undefined;
    if (message.poolData) {
      obj.pool_data = message.poolData.map(e => e ? PoolData.toAmino(e) : undefined);
    } else {
      obj.pool_data = [];
    }
    if (message.positions) {
      obj.positions = message.positions.map(e => e ? Position.toAmino(e) : undefined);
    } else {
      obj.positions = [];
    }
    obj.next_position_id = message.nextPositionId ? message.nextPositionId.toString() : undefined;
    return obj;
  },
  fromAminoMsg(object) {
    return GenesisState.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/concentratedliquidity/genesis-state",
      value: GenesisState.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return GenesisState.decode(message.value);
  },
  toProto(message) {
    return GenesisState.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.concentratedliquidity.v1beta1.GenesisState",
      value: GenesisState.encode(message).finish()
    };
  }
};
function createBaseAccumObject() {
  return {
    name: "",
    accumContent: undefined
  };
}
export const AccumObject = {
  typeUrl: "/osmosis.concentratedliquidity.v1beta1.AccumObject",
  encode(message, writer = _m0.Writer.create()) {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.accumContent !== undefined) {
      AccumulatorContent.encode(message.accumContent, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccumObject();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.name = reader.string();
          break;
        case 2:
          message.accumContent = AccumulatorContent.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$name;
    const message = createBaseAccumObject();
    message.name = (_object$name = object.name) !== null && _object$name !== void 0 ? _object$name : "";
    message.accumContent = object.accumContent !== undefined && object.accumContent !== null ? AccumulatorContent.fromPartial(object.accumContent) : undefined;
    return message;
  },
  fromAmino(object) {
    return {
      name: object.name,
      accumContent: object !== null && object !== void 0 && object.accum_content ? AccumulatorContent.fromAmino(object.accum_content) : undefined
    };
  },
  toAmino(message) {
    const obj = {};
    obj.name = message.name;
    obj.accum_content = message.accumContent ? AccumulatorContent.toAmino(message.accumContent) : undefined;
    return obj;
  },
  fromAminoMsg(object) {
    return AccumObject.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/concentratedliquidity/accum-object",
      value: AccumObject.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return AccumObject.decode(message.value);
  },
  toProto(message) {
    return AccumObject.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.concentratedliquidity.v1beta1.AccumObject",
      value: AccumObject.encode(message).finish()
    };
  }
};
export const PoolI_InterfaceDecoder = input => {
  const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
  const data = Any.decode(reader, reader.uint32());
  switch (data.typeUrl) {
    case "/osmosis.concentratedliquidity.v1beta1.Pool":
      return Pool1.decode(data.value);
    case "/osmosis.cosmwasmpool.v1beta1.CosmWasmPool":
      return CosmWasmPool.decode(data.value);
    case "/osmosis.gamm.v1beta1.Pool":
      return Pool2.decode(data.value);
    case "/osmosis.gamm.poolmodels.stableswap.v1beta1.Pool":
      return Pool3.decode(data.value);
    default:
      return data;
  }
};
export const PoolI_FromAmino = content => {
  switch (content.type) {
    case "osmosis/concentratedliquidity/pool":
      return Any.fromPartial({
        typeUrl: "/osmosis.concentratedliquidity.v1beta1.Pool",
        value: Pool1.encode(Pool1.fromPartial(Pool1.fromAmino(content.value))).finish()
      });
    case "osmosis/cosmwasmpool/cosm-wasm-pool":
      return Any.fromPartial({
        typeUrl: "/osmosis.cosmwasmpool.v1beta1.CosmWasmPool",
        value: CosmWasmPool.encode(CosmWasmPool.fromPartial(CosmWasmPool.fromAmino(content.value))).finish()
      });
    case "osmosis/gamm/BalancerPool":
      return Any.fromPartial({
        typeUrl: "/osmosis.gamm.v1beta1.Pool",
        value: Pool2.encode(Pool2.fromPartial(Pool2.fromAmino(content.value))).finish()
      });
    case "osmosis/gamm/StableswapPool":
      return Any.fromPartial({
        typeUrl: "/osmosis.gamm.poolmodels.stableswap.v1beta1.Pool",
        value: Pool3.encode(Pool3.fromPartial(Pool3.fromAmino(content.value))).finish()
      });
    default:
      return Any.fromAmino(content);
  }
};
export const PoolI_ToAmino = content => {
  switch (content.typeUrl) {
    case "/osmosis.concentratedliquidity.v1beta1.Pool":
      return {
        type: "osmosis/concentratedliquidity/pool",
        value: Pool1.toAmino(Pool1.decode(content.value))
      };
    case "/osmosis.cosmwasmpool.v1beta1.CosmWasmPool":
      return {
        type: "osmosis/cosmwasmpool/cosm-wasm-pool",
        value: CosmWasmPool.toAmino(CosmWasmPool.decode(content.value))
      };
    case "/osmosis.gamm.v1beta1.Pool":
      return {
        type: "osmosis/gamm/BalancerPool",
        value: Pool2.toAmino(Pool2.decode(content.value))
      };
    case "/osmosis.gamm.poolmodels.stableswap.v1beta1.Pool":
      return {
        type: "osmosis/gamm/StableswapPool",
        value: Pool3.toAmino(Pool3.decode(content.value))
      };
    default:
      return Any.toAmino(content);
  }
};