import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import * as _m0 from "protobufjs/minimal";
import { createProtobufRpcClient } from "@cosmjs/stargate";
import { QueryPoolsRequest, QueryPoolsResponse, QueryParamsRequest, QueryParamsResponse, QueryUserPositionsRequest, QueryUserPositionsResponse, QueryTotalLiquidityForRangeRequest, QueryTotalLiquidityForRangeResponse, QueryLiquidityNetInDirectionRequest, QueryLiquidityNetInDirectionResponse, QueryClaimableFeesRequest, QueryClaimableFeesResponse, QueryPositionByIdRequest, QueryPositionByIdResponse } from "./query";
export class QueryClientImpl {
  constructor(rpc) {
    _defineProperty(this, "rpc", void 0);
    this.rpc = rpc;
    this.pools = this.pools.bind(this);
    this.params = this.params.bind(this);
    this.userPositions = this.userPositions.bind(this);
    this.totalLiquidityForRange = this.totalLiquidityForRange.bind(this);
    this.liquidityNetInDirection = this.liquidityNetInDirection.bind(this);
    this.claimableFees = this.claimableFees.bind(this);
    this.positionById = this.positionById.bind(this);
  }
  pools(request = {
    pagination: undefined
  }) {
    const data = QueryPoolsRequest.encode(request).finish();
    const promise = this.rpc.request("osmosis.concentratedliquidity.v1beta1.Query", "Pools", data);
    return promise.then(data => QueryPoolsResponse.decode(new _m0.Reader(data)));
  }
  params(request = {}) {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request("osmosis.concentratedliquidity.v1beta1.Query", "Params", data);
    return promise.then(data => QueryParamsResponse.decode(new _m0.Reader(data)));
  }
  userPositions(request) {
    const data = QueryUserPositionsRequest.encode(request).finish();
    const promise = this.rpc.request("osmosis.concentratedliquidity.v1beta1.Query", "UserPositions", data);
    return promise.then(data => QueryUserPositionsResponse.decode(new _m0.Reader(data)));
  }
  totalLiquidityForRange(request) {
    const data = QueryTotalLiquidityForRangeRequest.encode(request).finish();
    const promise = this.rpc.request("osmosis.concentratedliquidity.v1beta1.Query", "TotalLiquidityForRange", data);
    return promise.then(data => QueryTotalLiquidityForRangeResponse.decode(new _m0.Reader(data)));
  }
  liquidityNetInDirection(request) {
    const data = QueryLiquidityNetInDirectionRequest.encode(request).finish();
    const promise = this.rpc.request("osmosis.concentratedliquidity.v1beta1.Query", "LiquidityNetInDirection", data);
    return promise.then(data => QueryLiquidityNetInDirectionResponse.decode(new _m0.Reader(data)));
  }
  claimableFees(request) {
    const data = QueryClaimableFeesRequest.encode(request).finish();
    const promise = this.rpc.request("osmosis.concentratedliquidity.v1beta1.Query", "ClaimableFees", data);
    return promise.then(data => QueryClaimableFeesResponse.decode(new _m0.Reader(data)));
  }
  positionById(request) {
    const data = QueryPositionByIdRequest.encode(request).finish();
    const promise = this.rpc.request("osmosis.concentratedliquidity.v1beta1.Query", "PositionById", data);
    return promise.then(data => QueryPositionByIdResponse.decode(new _m0.Reader(data)));
  }
}
export const createRpcQueryExtension = base => {
  const rpc = createProtobufRpcClient(base);
  const queryService = new QueryClientImpl(rpc);
  return {
    pools(request) {
      return queryService.pools(request);
    },
    params(request) {
      return queryService.params(request);
    },
    userPositions(request) {
      return queryService.userPositions(request);
    },
    totalLiquidityForRange(request) {
      return queryService.totalLiquidityForRange(request);
    },
    liquidityNetInDirection(request) {
      return queryService.liquidityNetInDirection(request);
    },
    claimableFees(request) {
      return queryService.claimableFees(request);
    },
    positionById(request) {
      return queryService.positionById(request);
    }
  };
};