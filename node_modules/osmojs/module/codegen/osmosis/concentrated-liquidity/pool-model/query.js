import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";
import { PositionWithUnderlyingAssetBreakdown } from "../position";
import { Any } from "../../../google/protobuf/any";
import { Params } from "../params";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { Pool as Pool1 } from "../pool";
import { CosmWasmPool } from "../../cosmwasmpool/v1beta1/model/pool";
import { Pool as Pool2 } from "../../gamm/pool-models/balancer/balancerPool";
import { Pool as Pool3 } from "../../gamm/pool-models/stableswap/stableswap_pool";
import { Long } from "../../../helpers";
import * as _m0 from "protobufjs/minimal";
/** =============================== UserPositions */

function createBaseQueryUserPositionsRequest() {
  return {
    address: "",
    poolId: Long.UZERO
  };
}
export const QueryUserPositionsRequest = {
  typeUrl: "/osmosis.concentratedliquidity.v1beta1.QueryUserPositionsRequest",
  encode(message, writer = _m0.Writer.create()) {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (!message.poolId.isZero()) {
      writer.uint32(16).uint64(message.poolId);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryUserPositionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.address = reader.string();
          break;
        case 2:
          message.poolId = reader.uint64();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$address;
    const message = createBaseQueryUserPositionsRequest();
    message.address = (_object$address = object.address) !== null && _object$address !== void 0 ? _object$address : "";
    message.poolId = object.poolId !== undefined && object.poolId !== null ? Long.fromValue(object.poolId) : Long.UZERO;
    return message;
  },
  fromAmino(object) {
    return {
      address: object.address,
      poolId: Long.fromString(object.pool_id)
    };
  },
  toAmino(message) {
    const obj = {};
    obj.address = message.address;
    obj.pool_id = message.poolId ? message.poolId.toString() : undefined;
    return obj;
  },
  fromAminoMsg(object) {
    return QueryUserPositionsRequest.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/concentratedliquidity/query-user-positions-request",
      value: QueryUserPositionsRequest.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return QueryUserPositionsRequest.decode(message.value);
  },
  toProto(message) {
    return QueryUserPositionsRequest.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.concentratedliquidity.v1beta1.QueryUserPositionsRequest",
      value: QueryUserPositionsRequest.encode(message).finish()
    };
  }
};
function createBaseQueryUserPositionsResponse() {
  return {
    positions: []
  };
}
export const QueryUserPositionsResponse = {
  typeUrl: "/osmosis.concentratedliquidity.v1beta1.QueryUserPositionsResponse",
  encode(message, writer = _m0.Writer.create()) {
    for (const v of message.positions) {
      PositionWithUnderlyingAssetBreakdown.encode(v, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryUserPositionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.positions.push(PositionWithUnderlyingAssetBreakdown.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$positions;
    const message = createBaseQueryUserPositionsResponse();
    message.positions = ((_object$positions = object.positions) === null || _object$positions === void 0 ? void 0 : _object$positions.map(e => PositionWithUnderlyingAssetBreakdown.fromPartial(e))) || [];
    return message;
  },
  fromAmino(object) {
    return {
      positions: Array.isArray(object === null || object === void 0 ? void 0 : object.positions) ? object.positions.map(e => PositionWithUnderlyingAssetBreakdown.fromAmino(e)) : []
    };
  },
  toAmino(message) {
    const obj = {};
    if (message.positions) {
      obj.positions = message.positions.map(e => e ? PositionWithUnderlyingAssetBreakdown.toAmino(e) : undefined);
    } else {
      obj.positions = [];
    }
    return obj;
  },
  fromAminoMsg(object) {
    return QueryUserPositionsResponse.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/concentratedliquidity/query-user-positions-response",
      value: QueryUserPositionsResponse.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return QueryUserPositionsResponse.decode(message.value);
  },
  toProto(message) {
    return QueryUserPositionsResponse.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.concentratedliquidity.v1beta1.QueryUserPositionsResponse",
      value: QueryUserPositionsResponse.encode(message).finish()
    };
  }
};
function createBaseQueryPositionByIdRequest() {
  return {
    positionId: Long.UZERO
  };
}
export const QueryPositionByIdRequest = {
  typeUrl: "/osmosis.concentratedliquidity.v1beta1.QueryPositionByIdRequest",
  encode(message, writer = _m0.Writer.create()) {
    if (!message.positionId.isZero()) {
      writer.uint32(8).uint64(message.positionId);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPositionByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.positionId = reader.uint64();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    const message = createBaseQueryPositionByIdRequest();
    message.positionId = object.positionId !== undefined && object.positionId !== null ? Long.fromValue(object.positionId) : Long.UZERO;
    return message;
  },
  fromAmino(object) {
    return {
      positionId: Long.fromString(object.position_id)
    };
  },
  toAmino(message) {
    const obj = {};
    obj.position_id = message.positionId ? message.positionId.toString() : undefined;
    return obj;
  },
  fromAminoMsg(object) {
    return QueryPositionByIdRequest.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/concentratedliquidity/query-position-by-id-request",
      value: QueryPositionByIdRequest.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return QueryPositionByIdRequest.decode(message.value);
  },
  toProto(message) {
    return QueryPositionByIdRequest.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.concentratedliquidity.v1beta1.QueryPositionByIdRequest",
      value: QueryPositionByIdRequest.encode(message).finish()
    };
  }
};
function createBaseQueryPositionByIdResponse() {
  return {
    position: undefined
  };
}
export const QueryPositionByIdResponse = {
  typeUrl: "/osmosis.concentratedliquidity.v1beta1.QueryPositionByIdResponse",
  encode(message, writer = _m0.Writer.create()) {
    if (message.position !== undefined) {
      PositionWithUnderlyingAssetBreakdown.encode(message.position, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPositionByIdResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.position = PositionWithUnderlyingAssetBreakdown.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    const message = createBaseQueryPositionByIdResponse();
    message.position = object.position !== undefined && object.position !== null ? PositionWithUnderlyingAssetBreakdown.fromPartial(object.position) : undefined;
    return message;
  },
  fromAmino(object) {
    return {
      position: object !== null && object !== void 0 && object.position ? PositionWithUnderlyingAssetBreakdown.fromAmino(object.position) : undefined
    };
  },
  toAmino(message) {
    const obj = {};
    obj.position = message.position ? PositionWithUnderlyingAssetBreakdown.toAmino(message.position) : undefined;
    return obj;
  },
  fromAminoMsg(object) {
    return QueryPositionByIdResponse.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/concentratedliquidity/query-position-by-id-response",
      value: QueryPositionByIdResponse.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return QueryPositionByIdResponse.decode(message.value);
  },
  toProto(message) {
    return QueryPositionByIdResponse.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.concentratedliquidity.v1beta1.QueryPositionByIdResponse",
      value: QueryPositionByIdResponse.encode(message).finish()
    };
  }
};
function createBaseQueryPoolsRequest() {
  return {
    pagination: undefined
  };
}
export const QueryPoolsRequest = {
  typeUrl: "/osmosis.concentratedliquidity.v1beta1.QueryPoolsRequest",
  encode(message, writer = _m0.Writer.create()) {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPoolsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          message.pagination = PageRequest.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    const message = createBaseQueryPoolsRequest();
    message.pagination = object.pagination !== undefined && object.pagination !== null ? PageRequest.fromPartial(object.pagination) : undefined;
    return message;
  },
  fromAmino(object) {
    return {
      pagination: object !== null && object !== void 0 && object.pagination ? PageRequest.fromAmino(object.pagination) : undefined
    };
  },
  toAmino(message) {
    const obj = {};
    obj.pagination = message.pagination ? PageRequest.toAmino(message.pagination) : undefined;
    return obj;
  },
  fromAminoMsg(object) {
    return QueryPoolsRequest.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/concentratedliquidity/query-pools-request",
      value: QueryPoolsRequest.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return QueryPoolsRequest.decode(message.value);
  },
  toProto(message) {
    return QueryPoolsRequest.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.concentratedliquidity.v1beta1.QueryPoolsRequest",
      value: QueryPoolsRequest.encode(message).finish()
    };
  }
};
function createBaseQueryPoolsResponse() {
  return {
    pools: [],
    pagination: undefined
  };
}
export const QueryPoolsResponse = {
  typeUrl: "/osmosis.concentratedliquidity.v1beta1.QueryPoolsResponse",
  encode(message, writer = _m0.Writer.create()) {
    for (const v of message.pools) {
      Any.encode(v, writer.uint32(10).fork()).ldelim();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPoolsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.pools.push(PoolI_InterfaceDecoder(reader));
          break;
        case 2:
          message.pagination = PageResponse.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$pools;
    const message = createBaseQueryPoolsResponse();
    message.pools = ((_object$pools = object.pools) === null || _object$pools === void 0 ? void 0 : _object$pools.map(e => Any.fromPartial(e))) || [];
    message.pagination = object.pagination !== undefined && object.pagination !== null ? PageResponse.fromPartial(object.pagination) : undefined;
    return message;
  },
  fromAmino(object) {
    return {
      pools: Array.isArray(object === null || object === void 0 ? void 0 : object.pools) ? object.pools.map(e => PoolI_FromAmino(e)) : [],
      pagination: object !== null && object !== void 0 && object.pagination ? PageResponse.fromAmino(object.pagination) : undefined
    };
  },
  toAmino(message) {
    const obj = {};
    if (message.pools) {
      obj.pools = message.pools.map(e => e ? PoolI_ToAmino(e) : undefined);
    } else {
      obj.pools = [];
    }
    obj.pagination = message.pagination ? PageResponse.toAmino(message.pagination) : undefined;
    return obj;
  },
  fromAminoMsg(object) {
    return QueryPoolsResponse.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/concentratedliquidity/query-pools-response",
      value: QueryPoolsResponse.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return QueryPoolsResponse.decode(message.value);
  },
  toProto(message) {
    return QueryPoolsResponse.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.concentratedliquidity.v1beta1.QueryPoolsResponse",
      value: QueryPoolsResponse.encode(message).finish()
    };
  }
};
function createBaseQueryParamsRequest() {
  return {};
}
export const QueryParamsRequest = {
  typeUrl: "/osmosis.concentratedliquidity.v1beta1.QueryParamsRequest",
  encode(_, writer = _m0.Writer.create()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(_) {
    const message = createBaseQueryParamsRequest();
    return message;
  },
  fromAmino(_) {
    return {};
  },
  toAmino(_) {
    const obj = {};
    return obj;
  },
  fromAminoMsg(object) {
    return QueryParamsRequest.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/concentratedliquidity/query-params-request",
      value: QueryParamsRequest.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return QueryParamsRequest.decode(message.value);
  },
  toProto(message) {
    return QueryParamsRequest.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.concentratedliquidity.v1beta1.QueryParamsRequest",
      value: QueryParamsRequest.encode(message).finish()
    };
  }
};
function createBaseQueryParamsResponse() {
  return {
    params: undefined
  };
}
export const QueryParamsResponse = {
  typeUrl: "/osmosis.concentratedliquidity.v1beta1.QueryParamsResponse",
  encode(message, writer = _m0.Writer.create()) {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.params = Params.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    const message = createBaseQueryParamsResponse();
    message.params = object.params !== undefined && object.params !== null ? Params.fromPartial(object.params) : undefined;
    return message;
  },
  fromAmino(object) {
    return {
      params: object !== null && object !== void 0 && object.params ? Params.fromAmino(object.params) : undefined
    };
  },
  toAmino(message) {
    const obj = {};
    obj.params = message.params ? Params.toAmino(message.params) : undefined;
    return obj;
  },
  fromAminoMsg(object) {
    return QueryParamsResponse.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/concentratedliquidity/query-params-response",
      value: QueryParamsResponse.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return QueryParamsResponse.decode(message.value);
  },
  toProto(message) {
    return QueryParamsResponse.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.concentratedliquidity.v1beta1.QueryParamsResponse",
      value: QueryParamsResponse.encode(message).finish()
    };
  }
};
function createBaseTickLiquidityNet() {
  return {
    liquidityNet: "",
    tickIndex: ""
  };
}
export const TickLiquidityNet = {
  typeUrl: "/osmosis.concentratedliquidity.v1beta1.TickLiquidityNet",
  encode(message, writer = _m0.Writer.create()) {
    if (message.liquidityNet !== "") {
      writer.uint32(10).string(message.liquidityNet);
    }
    if (message.tickIndex !== "") {
      writer.uint32(18).string(message.tickIndex);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTickLiquidityNet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.liquidityNet = reader.string();
          break;
        case 2:
          message.tickIndex = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$liquidityNet, _object$tickIndex;
    const message = createBaseTickLiquidityNet();
    message.liquidityNet = (_object$liquidityNet = object.liquidityNet) !== null && _object$liquidityNet !== void 0 ? _object$liquidityNet : "";
    message.tickIndex = (_object$tickIndex = object.tickIndex) !== null && _object$tickIndex !== void 0 ? _object$tickIndex : "";
    return message;
  },
  fromAmino(object) {
    return {
      liquidityNet: object.liquidity_net,
      tickIndex: object.tick_index
    };
  },
  toAmino(message) {
    const obj = {};
    obj.liquidity_net = message.liquidityNet;
    obj.tick_index = message.tickIndex;
    return obj;
  },
  fromAminoMsg(object) {
    return TickLiquidityNet.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/concentratedliquidity/tick-liquidity-net",
      value: TickLiquidityNet.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return TickLiquidityNet.decode(message.value);
  },
  toProto(message) {
    return TickLiquidityNet.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.concentratedliquidity.v1beta1.TickLiquidityNet",
      value: TickLiquidityNet.encode(message).finish()
    };
  }
};
function createBaseLiquidityDepthWithRange() {
  return {
    liquidityAmount: "",
    lowerTick: "",
    upperTick: ""
  };
}
export const LiquidityDepthWithRange = {
  typeUrl: "/osmosis.concentratedliquidity.v1beta1.LiquidityDepthWithRange",
  encode(message, writer = _m0.Writer.create()) {
    if (message.liquidityAmount !== "") {
      writer.uint32(10).string(message.liquidityAmount);
    }
    if (message.lowerTick !== "") {
      writer.uint32(18).string(message.lowerTick);
    }
    if (message.upperTick !== "") {
      writer.uint32(26).string(message.upperTick);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLiquidityDepthWithRange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.liquidityAmount = reader.string();
          break;
        case 2:
          message.lowerTick = reader.string();
          break;
        case 3:
          message.upperTick = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$liquidityAmou, _object$lowerTick, _object$upperTick;
    const message = createBaseLiquidityDepthWithRange();
    message.liquidityAmount = (_object$liquidityAmou = object.liquidityAmount) !== null && _object$liquidityAmou !== void 0 ? _object$liquidityAmou : "";
    message.lowerTick = (_object$lowerTick = object.lowerTick) !== null && _object$lowerTick !== void 0 ? _object$lowerTick : "";
    message.upperTick = (_object$upperTick = object.upperTick) !== null && _object$upperTick !== void 0 ? _object$upperTick : "";
    return message;
  },
  fromAmino(object) {
    return {
      liquidityAmount: object.liquidity_amount,
      lowerTick: object.lower_tick,
      upperTick: object.upper_tick
    };
  },
  toAmino(message) {
    const obj = {};
    obj.liquidity_amount = message.liquidityAmount;
    obj.lower_tick = message.lowerTick;
    obj.upper_tick = message.upperTick;
    return obj;
  },
  fromAminoMsg(object) {
    return LiquidityDepthWithRange.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/concentratedliquidity/liquidity-depth-with-range",
      value: LiquidityDepthWithRange.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return LiquidityDepthWithRange.decode(message.value);
  },
  toProto(message) {
    return LiquidityDepthWithRange.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.concentratedliquidity.v1beta1.LiquidityDepthWithRange",
      value: LiquidityDepthWithRange.encode(message).finish()
    };
  }
};
function createBaseQueryLiquidityNetInDirectionRequest() {
  return {
    poolId: Long.UZERO,
    tokenIn: "",
    startTick: undefined,
    boundTick: undefined
  };
}
export const QueryLiquidityNetInDirectionRequest = {
  typeUrl: "/osmosis.concentratedliquidity.v1beta1.QueryLiquidityNetInDirectionRequest",
  encode(message, writer = _m0.Writer.create()) {
    if (!message.poolId.isZero()) {
      writer.uint32(8).uint64(message.poolId);
    }
    if (message.tokenIn !== "") {
      writer.uint32(18).string(message.tokenIn);
    }
    if (message.startTick !== undefined) {
      writer.uint32(26).string(message.startTick);
    }
    if (message.boundTick !== undefined) {
      writer.uint32(34).string(message.boundTick);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryLiquidityNetInDirectionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.poolId = reader.uint64();
          break;
        case 2:
          message.tokenIn = reader.string();
          break;
        case 3:
          message.startTick = reader.string();
          break;
        case 4:
          message.boundTick = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$tokenIn, _object$startTick, _object$boundTick;
    const message = createBaseQueryLiquidityNetInDirectionRequest();
    message.poolId = object.poolId !== undefined && object.poolId !== null ? Long.fromValue(object.poolId) : Long.UZERO;
    message.tokenIn = (_object$tokenIn = object.tokenIn) !== null && _object$tokenIn !== void 0 ? _object$tokenIn : "";
    message.startTick = (_object$startTick = object.startTick) !== null && _object$startTick !== void 0 ? _object$startTick : undefined;
    message.boundTick = (_object$boundTick = object.boundTick) !== null && _object$boundTick !== void 0 ? _object$boundTick : undefined;
    return message;
  },
  fromAmino(object) {
    return {
      poolId: Long.fromString(object.pool_id),
      tokenIn: object.token_in,
      startTick: object === null || object === void 0 ? void 0 : object.start_tick,
      boundTick: object === null || object === void 0 ? void 0 : object.bound_tick
    };
  },
  toAmino(message) {
    const obj = {};
    obj.pool_id = message.poolId ? message.poolId.toString() : undefined;
    obj.token_in = message.tokenIn;
    obj.start_tick = message.startTick;
    obj.bound_tick = message.boundTick;
    return obj;
  },
  fromAminoMsg(object) {
    return QueryLiquidityNetInDirectionRequest.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/concentratedliquidity/query-liquidity-net-in-direction-request",
      value: QueryLiquidityNetInDirectionRequest.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return QueryLiquidityNetInDirectionRequest.decode(message.value);
  },
  toProto(message) {
    return QueryLiquidityNetInDirectionRequest.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.concentratedliquidity.v1beta1.QueryLiquidityNetInDirectionRequest",
      value: QueryLiquidityNetInDirectionRequest.encode(message).finish()
    };
  }
};
function createBaseQueryLiquidityNetInDirectionResponse() {
  return {
    liquidityDepths: [],
    currentTick: Long.ZERO,
    currentLiquidity: ""
  };
}
export const QueryLiquidityNetInDirectionResponse = {
  typeUrl: "/osmosis.concentratedliquidity.v1beta1.QueryLiquidityNetInDirectionResponse",
  encode(message, writer = _m0.Writer.create()) {
    for (const v of message.liquidityDepths) {
      TickLiquidityNet.encode(v, writer.uint32(10).fork()).ldelim();
    }
    if (!message.currentTick.isZero()) {
      writer.uint32(16).int64(message.currentTick);
    }
    if (message.currentLiquidity !== "") {
      writer.uint32(26).string(message.currentLiquidity);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryLiquidityNetInDirectionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.liquidityDepths.push(TickLiquidityNet.decode(reader, reader.uint32()));
          break;
        case 2:
          message.currentTick = reader.int64();
          break;
        case 3:
          message.currentLiquidity = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$liquidityDept, _object$currentLiquid;
    const message = createBaseQueryLiquidityNetInDirectionResponse();
    message.liquidityDepths = ((_object$liquidityDept = object.liquidityDepths) === null || _object$liquidityDept === void 0 ? void 0 : _object$liquidityDept.map(e => TickLiquidityNet.fromPartial(e))) || [];
    message.currentTick = object.currentTick !== undefined && object.currentTick !== null ? Long.fromValue(object.currentTick) : Long.ZERO;
    message.currentLiquidity = (_object$currentLiquid = object.currentLiquidity) !== null && _object$currentLiquid !== void 0 ? _object$currentLiquid : "";
    return message;
  },
  fromAmino(object) {
    return {
      liquidityDepths: Array.isArray(object === null || object === void 0 ? void 0 : object.liquidity_depths) ? object.liquidity_depths.map(e => TickLiquidityNet.fromAmino(e)) : [],
      currentTick: Long.fromString(object.current_tick),
      currentLiquidity: object.current_liquidity
    };
  },
  toAmino(message) {
    const obj = {};
    if (message.liquidityDepths) {
      obj.liquidity_depths = message.liquidityDepths.map(e => e ? TickLiquidityNet.toAmino(e) : undefined);
    } else {
      obj.liquidity_depths = [];
    }
    obj.current_tick = message.currentTick ? message.currentTick.toString() : undefined;
    obj.current_liquidity = message.currentLiquidity;
    return obj;
  },
  fromAminoMsg(object) {
    return QueryLiquidityNetInDirectionResponse.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/concentratedliquidity/query-liquidity-net-in-direction-response",
      value: QueryLiquidityNetInDirectionResponse.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return QueryLiquidityNetInDirectionResponse.decode(message.value);
  },
  toProto(message) {
    return QueryLiquidityNetInDirectionResponse.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.concentratedliquidity.v1beta1.QueryLiquidityNetInDirectionResponse",
      value: QueryLiquidityNetInDirectionResponse.encode(message).finish()
    };
  }
};
function createBaseQueryTotalLiquidityForRangeRequest() {
  return {
    poolId: Long.UZERO
  };
}
export const QueryTotalLiquidityForRangeRequest = {
  typeUrl: "/osmosis.concentratedliquidity.v1beta1.QueryTotalLiquidityForRangeRequest",
  encode(message, writer = _m0.Writer.create()) {
    if (!message.poolId.isZero()) {
      writer.uint32(8).uint64(message.poolId);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTotalLiquidityForRangeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.poolId = reader.uint64();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    const message = createBaseQueryTotalLiquidityForRangeRequest();
    message.poolId = object.poolId !== undefined && object.poolId !== null ? Long.fromValue(object.poolId) : Long.UZERO;
    return message;
  },
  fromAmino(object) {
    return {
      poolId: Long.fromString(object.pool_id)
    };
  },
  toAmino(message) {
    const obj = {};
    obj.pool_id = message.poolId ? message.poolId.toString() : undefined;
    return obj;
  },
  fromAminoMsg(object) {
    return QueryTotalLiquidityForRangeRequest.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/concentratedliquidity/query-total-liquidity-for-range-request",
      value: QueryTotalLiquidityForRangeRequest.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return QueryTotalLiquidityForRangeRequest.decode(message.value);
  },
  toProto(message) {
    return QueryTotalLiquidityForRangeRequest.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.concentratedliquidity.v1beta1.QueryTotalLiquidityForRangeRequest",
      value: QueryTotalLiquidityForRangeRequest.encode(message).finish()
    };
  }
};
function createBaseQueryTotalLiquidityForRangeResponse() {
  return {
    liquidity: []
  };
}
export const QueryTotalLiquidityForRangeResponse = {
  typeUrl: "/osmosis.concentratedliquidity.v1beta1.QueryTotalLiquidityForRangeResponse",
  encode(message, writer = _m0.Writer.create()) {
    for (const v of message.liquidity) {
      LiquidityDepthWithRange.encode(v, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTotalLiquidityForRangeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.liquidity.push(LiquidityDepthWithRange.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$liquidity;
    const message = createBaseQueryTotalLiquidityForRangeResponse();
    message.liquidity = ((_object$liquidity = object.liquidity) === null || _object$liquidity === void 0 ? void 0 : _object$liquidity.map(e => LiquidityDepthWithRange.fromPartial(e))) || [];
    return message;
  },
  fromAmino(object) {
    return {
      liquidity: Array.isArray(object === null || object === void 0 ? void 0 : object.liquidity) ? object.liquidity.map(e => LiquidityDepthWithRange.fromAmino(e)) : []
    };
  },
  toAmino(message) {
    const obj = {};
    if (message.liquidity) {
      obj.liquidity = message.liquidity.map(e => e ? LiquidityDepthWithRange.toAmino(e) : undefined);
    } else {
      obj.liquidity = [];
    }
    return obj;
  },
  fromAminoMsg(object) {
    return QueryTotalLiquidityForRangeResponse.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/concentratedliquidity/query-total-liquidity-for-range-response",
      value: QueryTotalLiquidityForRangeResponse.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return QueryTotalLiquidityForRangeResponse.decode(message.value);
  },
  toProto(message) {
    return QueryTotalLiquidityForRangeResponse.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.concentratedliquidity.v1beta1.QueryTotalLiquidityForRangeResponse",
      value: QueryTotalLiquidityForRangeResponse.encode(message).finish()
    };
  }
};
function createBaseQueryClaimableFeesRequest() {
  return {
    positionId: Long.UZERO
  };
}
export const QueryClaimableFeesRequest = {
  typeUrl: "/osmosis.concentratedliquidity.v1beta1.QueryClaimableFeesRequest",
  encode(message, writer = _m0.Writer.create()) {
    if (!message.positionId.isZero()) {
      writer.uint32(8).uint64(message.positionId);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryClaimableFeesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.positionId = reader.uint64();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    const message = createBaseQueryClaimableFeesRequest();
    message.positionId = object.positionId !== undefined && object.positionId !== null ? Long.fromValue(object.positionId) : Long.UZERO;
    return message;
  },
  fromAmino(object) {
    return {
      positionId: Long.fromString(object.position_id)
    };
  },
  toAmino(message) {
    const obj = {};
    obj.position_id = message.positionId ? message.positionId.toString() : undefined;
    return obj;
  },
  fromAminoMsg(object) {
    return QueryClaimableFeesRequest.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/concentratedliquidity/query-claimable-fees-request",
      value: QueryClaimableFeesRequest.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return QueryClaimableFeesRequest.decode(message.value);
  },
  toProto(message) {
    return QueryClaimableFeesRequest.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.concentratedliquidity.v1beta1.QueryClaimableFeesRequest",
      value: QueryClaimableFeesRequest.encode(message).finish()
    };
  }
};
function createBaseQueryClaimableFeesResponse() {
  return {
    claimableFees: []
  };
}
export const QueryClaimableFeesResponse = {
  typeUrl: "/osmosis.concentratedliquidity.v1beta1.QueryClaimableFeesResponse",
  encode(message, writer = _m0.Writer.create()) {
    for (const v of message.claimableFees) {
      Coin.encode(v, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryClaimableFeesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.claimableFees.push(Coin.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$claimableFees;
    const message = createBaseQueryClaimableFeesResponse();
    message.claimableFees = ((_object$claimableFees = object.claimableFees) === null || _object$claimableFees === void 0 ? void 0 : _object$claimableFees.map(e => Coin.fromPartial(e))) || [];
    return message;
  },
  fromAmino(object) {
    return {
      claimableFees: Array.isArray(object === null || object === void 0 ? void 0 : object.claimable_fees) ? object.claimable_fees.map(e => Coin.fromAmino(e)) : []
    };
  },
  toAmino(message) {
    const obj = {};
    if (message.claimableFees) {
      obj.claimable_fees = message.claimableFees.map(e => e ? Coin.toAmino(e) : undefined);
    } else {
      obj.claimable_fees = [];
    }
    return obj;
  },
  fromAminoMsg(object) {
    return QueryClaimableFeesResponse.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/concentratedliquidity/query-claimable-fees-response",
      value: QueryClaimableFeesResponse.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return QueryClaimableFeesResponse.decode(message.value);
  },
  toProto(message) {
    return QueryClaimableFeesResponse.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.concentratedliquidity.v1beta1.QueryClaimableFeesResponse",
      value: QueryClaimableFeesResponse.encode(message).finish()
    };
  }
};
export const PoolI_InterfaceDecoder = input => {
  const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
  const data = Any.decode(reader, reader.uint32());
  switch (data.typeUrl) {
    case "/osmosis.concentratedliquidity.v1beta1.Pool":
      return Pool1.decode(data.value);
    case "/osmosis.cosmwasmpool.v1beta1.CosmWasmPool":
      return CosmWasmPool.decode(data.value);
    case "/osmosis.gamm.v1beta1.Pool":
      return Pool2.decode(data.value);
    case "/osmosis.gamm.poolmodels.stableswap.v1beta1.Pool":
      return Pool3.decode(data.value);
    default:
      return data;
  }
};
export const PoolI_FromAmino = content => {
  switch (content.type) {
    case "osmosis/concentratedliquidity/pool":
      return Any.fromPartial({
        typeUrl: "/osmosis.concentratedliquidity.v1beta1.Pool",
        value: Pool1.encode(Pool1.fromPartial(Pool1.fromAmino(content.value))).finish()
      });
    case "osmosis/cosmwasmpool/cosm-wasm-pool":
      return Any.fromPartial({
        typeUrl: "/osmosis.cosmwasmpool.v1beta1.CosmWasmPool",
        value: CosmWasmPool.encode(CosmWasmPool.fromPartial(CosmWasmPool.fromAmino(content.value))).finish()
      });
    case "osmosis/gamm/BalancerPool":
      return Any.fromPartial({
        typeUrl: "/osmosis.gamm.v1beta1.Pool",
        value: Pool2.encode(Pool2.fromPartial(Pool2.fromAmino(content.value))).finish()
      });
    case "osmosis/gamm/StableswapPool":
      return Any.fromPartial({
        typeUrl: "/osmosis.gamm.poolmodels.stableswap.v1beta1.Pool",
        value: Pool3.encode(Pool3.fromPartial(Pool3.fromAmino(content.value))).finish()
      });
    default:
      return Any.fromAmino(content);
  }
};
export const PoolI_ToAmino = content => {
  switch (content.typeUrl) {
    case "/osmosis.concentratedliquidity.v1beta1.Pool":
      return {
        type: "osmosis/concentratedliquidity/pool",
        value: Pool1.toAmino(Pool1.decode(content.value))
      };
    case "/osmosis.cosmwasmpool.v1beta1.CosmWasmPool":
      return {
        type: "osmosis/cosmwasmpool/cosm-wasm-pool",
        value: CosmWasmPool.toAmino(CosmWasmPool.decode(content.value))
      };
    case "/osmosis.gamm.v1beta1.Pool":
      return {
        type: "osmosis/gamm/BalancerPool",
        value: Pool2.toAmino(Pool2.decode(content.value))
      };
    case "/osmosis.gamm.poolmodels.stableswap.v1beta1.Pool":
      return {
        type: "osmosis/gamm/StableswapPool",
        value: Pool3.toAmino(Pool3.decode(content.value))
      };
    default:
      return Any.toAmino(content);
  }
};