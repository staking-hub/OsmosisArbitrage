import { Long } from "../../helpers";
import * as _m0 from "protobufjs/minimal";
function createBaseParams() {
  return {
    authorizedTickSpacing: [],
    authorizedSwapFees: []
  };
}
export const Params = {
  typeUrl: "/osmosis.concentratedliquidity.Params",
  encode(message, writer = _m0.Writer.create()) {
    writer.uint32(10).fork();
    for (const v of message.authorizedTickSpacing) {
      writer.uint64(v);
    }
    writer.ldelim();
    for (const v of message.authorizedSwapFees) {
      writer.uint32(18).string(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if ((tag & 7) === 2) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.authorizedTickSpacing.push(reader.uint64());
            }
          } else {
            message.authorizedTickSpacing.push(reader.uint64());
          }
          break;
        case 2:
          message.authorizedSwapFees.push(reader.string());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$authorizedTic, _object$authorizedSwa;
    const message = createBaseParams();
    message.authorizedTickSpacing = ((_object$authorizedTic = object.authorizedTickSpacing) === null || _object$authorizedTic === void 0 ? void 0 : _object$authorizedTic.map(e => Long.fromValue(e))) || [];
    message.authorizedSwapFees = ((_object$authorizedSwa = object.authorizedSwapFees) === null || _object$authorizedSwa === void 0 ? void 0 : _object$authorizedSwa.map(e => e)) || [];
    return message;
  },
  fromAmino(object) {
    return {
      authorizedTickSpacing: Array.isArray(object === null || object === void 0 ? void 0 : object.authorized_tick_spacing) ? object.authorized_tick_spacing.map(e => e) : [],
      authorizedSwapFees: Array.isArray(object === null || object === void 0 ? void 0 : object.authorized_swap_fees) ? object.authorized_swap_fees.map(e => e) : []
    };
  },
  toAmino(message) {
    const obj = {};
    if (message.authorizedTickSpacing) {
      obj.authorized_tick_spacing = message.authorizedTickSpacing.map(e => e);
    } else {
      obj.authorized_tick_spacing = [];
    }
    if (message.authorizedSwapFees) {
      obj.authorized_swap_fees = message.authorizedSwapFees.map(e => e);
    } else {
      obj.authorized_swap_fees = [];
    }
    return obj;
  },
  fromAminoMsg(object) {
    return Params.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/concentratedliquidity/params",
      value: Params.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return Params.decode(message.value);
  },
  toProto(message) {
    return Params.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.concentratedliquidity.Params",
      value: Params.encode(message).finish()
    };
  }
};