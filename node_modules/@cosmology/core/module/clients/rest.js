import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import axios from 'axios';
import retry from 'retry';
export class RestClient {
  constructor({
    url
  }) {
    _defineProperty(this, "url", void 0);

    _defineProperty(this, "_clientType", void 0);

    _defineProperty(this, "instance", void 0);

    this.url = url.endsWith('/') ? url : `${url}/`;
    this._clientType = 'API';
    this.instance = axios.create({
      baseURL: this.url,
      timeout: 10000,
      headers: {}
    });
  }

  request(endpoint, opts = {}) {
    const operation = retry.operation({
      retries: 5,
      factor: 2,
      minTimeout: 1 * 1000,
      maxTimeout: 60 * 1000
    });
    return new Promise((resolve, reject) => {
      operation.attempt(async () => {
        let response;
        let err;

        try {
          response = await this.instance.get(endpoint, _objectSpread({
            timeout: 30000
          }, opts));
        } catch (e) {
          var _e$response, _e$response2, _e$response3;

          console.log(`STATUS CODE: ${e === null || e === void 0 ? void 0 : (_e$response = e.response) === null || _e$response === void 0 ? void 0 : _e$response.status}`);
          console.log(`STATUS TEXT: ${e === null || e === void 0 ? void 0 : (_e$response2 = e.response) === null || _e$response2 === void 0 ? void 0 : _e$response2.statusText}`);
          console.error(`${this._clientType} response error: ${e.response ? e.response.data : e}`);
          const statusNum = Number(e === null || e === void 0 ? void 0 : (_e$response3 = e.response) === null || _e$response3 === void 0 ? void 0 : _e$response3.status);
          if (statusNum >= 500) err = true;else return reject(e);
        }

        if (operation.retry(err)) {
          console.log('retrying...');
          return;
        }

        if (response && response.data) {
          resolve(response.data);
        } else {
          reject(operation.mainError());
        }
      });
    });
  }

}