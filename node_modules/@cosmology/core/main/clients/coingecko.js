"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPricesFromCoinGecko = exports.getPrices = exports.allGeckoAssets = exports._getPricesFromCoinGecko = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _axios = _interopRequireDefault(require("axios"));

var _assets = require("../assets");

var _utils = require("../utils/osmo/utils");

//  https://api.coingecko.com/api/v3/simple/price?ids=osmosis,ion,cosmos,terra-luna,crypto-com-chain,terrausd,secret,juno-network,persistence,terra-krw,akash-network,regen,sentinel,iris-network,starname,e-money,e-money-eur,likecoin,bitcanna,medibloc,comdex,cheqd-network,vidulum,stargaze,chihuahua-token&vs_currencies=usd

/**
 * @param {*} coins is a list of coins to check
 */
var getPrices = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
    var coins,
        fetchUrl,
        response,
        _args = arguments;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            coins = _args.length > 0 && _args[0] !== undefined ? _args[0] : ['osmosis'];
            //'https://api.coingecko.com/api/v3/simple/price?ids=cosmos,osmosis,ion,akash-network,sentinel,iris-network,crypto-com-chain,persistence,regen,starname,e-money,e-money-eur,juno-network,likecoin,terrausd,terra-luna,bitcanna,terra-krw,secret,medibloc,comdex,cheqd-network,vidulum&vs_currencies=usd'
            fetchUrl = "https://api.coingecko.com/api/v3/simple/price?ids=".concat(coins.join(), "&vs_currencies=usd");
            _context.prev = 2;
            _context.next = 5;
            return _axios["default"].get(fetchUrl);

          case 5:
            response = _context.sent;
            return _context.abrupt("return", response.data);

          case 9:
            _context.prev = 9;
            _context.t0 = _context["catch"](2);
            console.error('CoinGecko API response error:', _context.t0.response ? _context.t0.response.data : _context.t0);
            return _context.abrupt("return", null);

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[2, 9]]);
  }));

  return function getPrices() {
    return _ref.apply(this, arguments);
  };
}();

exports.getPrices = getPrices;

var allGeckoAssets = function allGeckoAssets() {
  return _assets.assets.filter(function (asset) {
    return !!asset.coingecko_id;
  });
};

exports.allGeckoAssets = allGeckoAssets;

var _getPricesFromCoinGecko = /*#__PURE__*/function () {
  var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
    var geckoAssets, geckoIds, prices;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            geckoAssets = allGeckoAssets();
            geckoIds = geckoAssets.map(function (asset) {
              return asset.coingecko_id;
            });
            _context2.next = 4;
            return getPrices(geckoIds);

          case 4:
            prices = _context2.sent;
            return _context2.abrupt("return", prices);

          case 6:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function _getPricesFromCoinGecko() {
    return _ref2.apply(this, arguments);
  };
}();

exports._getPricesFromCoinGecko = _getPricesFromCoinGecko;

var getPricesFromCoinGecko = /*#__PURE__*/function () {
  var _ref3 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3() {
    var prices;
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return _getPricesFromCoinGecko();

          case 2:
            prices = _context3.sent;
            return _context3.abrupt("return", (0, _utils.convertGeckoPricesToDenomPriceHash)(prices));

          case 4:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function getPricesFromCoinGecko() {
    return _ref3.apply(this, arguments);
  };
}();

exports.getPricesFromCoinGecko = getPricesFromCoinGecko;