"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gasEstimation = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _stargate = require("@cosmjs/stargate");

var gasEstimation = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(denom, stargateClient, address, msgs, memo, modifier) {
    var defaultGasPrice, getFee, simulate, getGasPrice, fee;
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            defaultGasPrice = '0.0025' + denom;

            getFee = function getFee(gas, gasPrice) {
              if (!gas) gas = 200000;
              if (!gasPrice) gasPrice = _stargate.GasPrice.fromString(defaultGasPrice);
              return (0, _stargate.calculateFee)(gas, gasPrice);
            };

            simulate = /*#__PURE__*/function () {
              var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(address, msgs, memo) {
                var modifier,
                    estimate,
                    _args = arguments;
                return _regenerator["default"].wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        modifier = _args.length > 3 && _args[3] !== undefined ? _args[3] : 1.5;
                        _context.next = 3;
                        return stargateClient.simulate(address, msgs, memo);

                      case 3:
                        estimate = _context.sent;
                        return _context.abrupt("return", parseInt(estimate * modifier));

                      case 5:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));

              return function simulate(_x7, _x8, _x9) {
                return _ref2.apply(this, arguments);
              };
            }();

            getGasPrice = /*#__PURE__*/function () {
              var _ref3 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(address, msgs, memo, modifier) {
                var fee, gas;
                return _regenerator["default"].wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        _context2.prev = 0;
                        _context2.next = 3;
                        return simulate(address, msgs, memo);

                      case 3:
                        gas = _context2.sent;
                        fee = getFee(gas); //   fee = getFee(gas, gasPrice)
                        // console.log(fee);

                        return _context2.abrupt("return", fee);

                      case 8:
                        _context2.prev = 8;
                        _context2.t0 = _context2["catch"](0);
                        console.log(_context2.t0);

                      case 11:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2, null, [[0, 8]]);
              }));

              return function getGasPrice(_x10, _x11, _x12, _x13) {
                return _ref3.apply(this, arguments);
              };
            }();

            _context3.next = 6;
            return getGasPrice(address, msgs, memo, modifier);

          case 6:
            fee = _context3.sent;

            if (denom === 'uhuahua') {
              // literally wtf (needs a 10x + 1)
              fee.amount[0].amount = "".concat(fee.amount[0].amount, "1");
            }

            if (denom === 'ucmdx') {
              // literally wtf (needs a 10x + 1)
              fee.amount[0].amount = "".concat(fee.amount[0].amount, "1");
            }

            return _context3.abrupt("return", fee);

          case 10:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function gasEstimation(_x, _x2, _x3, _x4, _x5, _x6) {
    return _ref.apply(this, arguments);
  };
}();

exports.gasEstimation = gasEstimation;