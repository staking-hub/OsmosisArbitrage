"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getWalletFromMnemonicForChain = exports.getWalletFromMnemonic = exports.getAccountFromMnemonic = void 0;
exports.makeHdPath = makeHdPath;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _amino = require("@cosmjs/amino");

var _crypto = require("@cosmjs/crypto");

var _chainRegistry = require("chain-registry");

function makeHdPath() {
  var coinType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 118;
  var account = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  return [_crypto.Slip10RawIndex.hardened(44), _crypto.Slip10RawIndex.hardened(coinType), _crypto.Slip10RawIndex.hardened(0), _crypto.Slip10RawIndex.normal(0), _crypto.Slip10RawIndex.normal(account)];
}

var getWalletFromMnemonic = /*#__PURE__*/function () {
  var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(_ref) {
    var mnemonic, token, chainFromAssets, chain, bech32_prefix, slip44, wallet;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            mnemonic = _ref.mnemonic, token = _ref.token;
            chainFromAssets = _chainRegistry.assets.find(function (_ref3) {
              var assets = _ref3.assets;
              var found = assets.find(function (_ref4) {
                var symbol = _ref4.symbol,
                    type_asset = _ref4.type_asset;
                return symbol === token && type_asset !== 'ics20';
              });
              if (found) return true;
            });
            chain = _chainRegistry.chains.find(function (_ref5) {
              var chain_name = _ref5.chain_name;
              return chain_name == chainFromAssets.chain_name;
            });
            _context.prev = 3;
            bech32_prefix = chain.bech32_prefix, slip44 = chain.slip44;
            _context.next = 7;
            return _amino.Secp256k1HdWallet.fromMnemonic(mnemonic, {
              prefix: bech32_prefix,
              hdPaths: [makeHdPath(slip44, 0)]
            });

          case 7:
            wallet = _context.sent;
            return _context.abrupt("return", wallet);

          case 11:
            _context.prev = 11;
            _context.t0 = _context["catch"](3);
            console.log('bad mnemonic');

          case 14:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[3, 11]]);
  }));

  return function getWalletFromMnemonic(_x) {
    return _ref2.apply(this, arguments);
  };
}();

exports.getWalletFromMnemonic = getWalletFromMnemonic;

var getWalletFromMnemonicForChain = /*#__PURE__*/function () {
  var _ref7 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(_ref6) {
    var mnemonic, chain, bech32_prefix, slip44, wallet;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            mnemonic = _ref6.mnemonic, chain = _ref6.chain;
            _context2.prev = 1;
            bech32_prefix = chain.bech32_prefix, slip44 = chain.slip44;
            _context2.next = 5;
            return _amino.Secp256k1HdWallet.fromMnemonic(mnemonic, {
              prefix: bech32_prefix,
              hdPaths: [makeHdPath(slip44, 0)]
            });

          case 5:
            wallet = _context2.sent;
            return _context2.abrupt("return", wallet);

          case 9:
            _context2.prev = 9;
            _context2.t0 = _context2["catch"](1);
            console.log('bad mnemonic');

          case 12:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[1, 9]]);
  }));

  return function getWalletFromMnemonicForChain(_x2) {
    return _ref7.apply(this, arguments);
  };
}();

exports.getWalletFromMnemonicForChain = getWalletFromMnemonicForChain;

var getAccountFromMnemonic = /*#__PURE__*/function () {
  var _ref9 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(_ref8) {
    var mnemonic, token, wallet, _yield$wallet$getAcco, _yield$wallet$getAcco2, mainAccount;

    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            mnemonic = _ref8.mnemonic, token = _ref8.token;
            _context3.next = 3;
            return getWalletFromMnemonic({
              mnemonic: mnemonic,
              token: token
            });

          case 3:
            wallet = _context3.sent;
            _context3.next = 6;
            return wallet.getAccounts();

          case 6:
            _yield$wallet$getAcco = _context3.sent;
            _yield$wallet$getAcco2 = (0, _slicedToArray2["default"])(_yield$wallet$getAcco, 1);
            mainAccount = _yield$wallet$getAcco2[0];
            return _context3.abrupt("return", mainAccount);

          case 10:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function getAccountFromMnemonic(_x3) {
    return _ref9.apply(this, arguments);
  };
}();

exports.getAccountFromMnemonic = getAccountFromMnemonic;