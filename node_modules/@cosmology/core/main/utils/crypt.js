"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decrypt = exports.crypt = void 0;
exports.hexToUtf8 = hexToUtf8;
exports.utf8ArrayToString = exports.stringToUtf8Array = void 0;
exports.utf8ToHex = utf8ToHex;

var _cryptoJs = _interopRequireWildcard(require("crypto-js"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var _decrypt = function _decrypt(ciphertext, salt) {
  var bytes = _cryptoJs.AES.decrypt(ciphertext, salt);

  try {
    var originalText = bytes.toString(_cryptoJs["default"].enc.Utf8);
    return originalText;
  } catch (e) {
    throw new Error('you probably have the wrong salt');
  }
};

var _encrypt = function _encrypt(message, salt) {
  var bytes = _cryptoJs.AES.encrypt(message, salt);

  return bytes.toString();
};

var crypt = function crypt(salt, text) {
  return _encrypt(text, (0, _cryptoJs.SHA256)(salt).toString());
};

exports.crypt = crypt;

var decrypt = function decrypt(salt, encoded) {
  return _decrypt(encoded, (0, _cryptoJs.SHA256)(salt).toString());
};

exports.decrypt = decrypt;

function hexToUtf8(hex) {
  return decodeURIComponent('%' + hex.match(/.{1,2}/g).join('%'));
}

function utf8ToHex(str) {
  return Array.from(str).map(function (c) {
    return c.charCodeAt(0) < 128 ? c.charCodeAt(0).toString(16) : encodeURIComponent(c).replace(/\%/g, '').toLowerCase();
  }).join('');
}

var utf8ArrayToString = function utf8ArrayToString(arr) {
  return Buffer.from(arr).toString('base64');
};

exports.utf8ArrayToString = utf8ArrayToString;

var stringToUtf8Array = function stringToUtf8Array(str) {
  return new Uint8Array(Buffer.from(str, 'base64'));
};

exports.stringToUtf8Array = stringToUtf8Array;