"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makePoolPairs = exports.getPoolsPricesPairs = exports.getPoolsDecoded = exports.getBalancerPools = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _long = _interopRequireDefault(require("long"));

var _unit = require("@keplr-wallet/unit");

var _utils = require("./utils");

var _clients = require("../../clients");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var makePoolPairs = function makePoolPairs(pools) {
  var liquidityLimit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100000;
  return pools.filter(Boolean).filter(function (pool) {
    return new _unit.Dec(pool.liquidity).gte(new _unit.Dec(liquidityLimit));
  }).filter(function (pool) {
    return pool.tokens.length === 2;
  }) // only pairs
  .map(function (pool) {
    var assetA = pool.tokens[0];
    var assetAinfo = (0, _utils.getOsmoAssetByDenom)(assetA.denom);
    var assetB = pool.tokens[1];
    var assetBinfo = (0, _utils.getOsmoAssetByDenom)(assetB.denom);
    return _objectSpread(_objectSpread({}, pool), {}, {
      pool_address: pool.address,
      base_name: assetAinfo.display,
      base_symbol: assetAinfo.symbol,
      base_address: assetAinfo.base,
      quote_name: assetBinfo.display,
      quote_symbol: assetBinfo.symbol,
      quote_address: assetBinfo.base
    });
  });
};

exports.makePoolPairs = makePoolPairs;

var getPoolsDecoded = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(client) {
    var rpcPools;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return client.osmosis.gamm.v1beta1.pools({
              pagination: {
                key: new Uint8Array(),
                offset: _long["default"].fromNumber(0),
                limit: _long["default"].fromNumber(1500),
                countTotal: false,
                reverse: false
              }
            });

          case 2:
            rpcPools = _context.sent;
            return _context.abrupt("return", rpcPools.pools.filter(function (pool) {
              return [// '/osmosis.gamm.poolmodels.stableswap.v1beta1.Pool',
              '/osmosis.gamm.v1beta1.Pool'].includes(pool.$typeUrl);
            }));

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getPoolsDecoded(_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.getPoolsDecoded = getPoolsDecoded;

var getBalancerPools = /*#__PURE__*/function () {
  var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(client) {
    var rawPools, pools;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return getPoolsDecoded(client);

          case 2:
            rawPools = _context2.sent;
            pools = rawPools.map(function (pool) {
              return (0, _clients.prettyPool)(pool);
            });
            return _context2.abrupt("return", pools);

          case 5:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function getBalancerPools(_x2) {
    return _ref2.apply(this, arguments);
  };
}();

exports.getBalancerPools = getBalancerPools;

var getPoolsPricesPairs = /*#__PURE__*/function () {
  var _ref3 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(client) {
    var pools, prices, prettyPools, pairs;
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return getBalancerPools(client);

          case 2:
            pools = _context3.sent;
            _context3.next = 5;
            return (0, _clients.getPricesFromCoinGecko)();

          case 5:
            prices = _context3.sent;
            prettyPools = (0, _utils.makePoolsPretty)(prices, pools);
            pairs = makePoolPairs(prettyPools);
            return _context3.abrupt("return", {
              pools: pools,
              prices: prices,
              pairs: pairs,
              prettyPools: prettyPools
            });

          case 9:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function getPoolsPricesPairs(_x3) {
    return _ref3.apply(this, arguments);
  };
}();

exports.getPoolsPricesPairs = getPoolsPricesPairs;