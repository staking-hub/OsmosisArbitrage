"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPoolAprs = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _excluded = ["apr_1d", "apr_7d", "apr_14d", "apy_1d", "apy_7d", "apy_14d"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var SECONDS_PER_YEAR = 365.25 * 24 * 60 * 60;
var BLOCKS_IN_A_YEAR = SECONDS_PER_YEAR / 14;

var aprToApy = function aprToApy(interest) {
  var frequency = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BLOCKS_IN_A_YEAR;
  return (Math.pow(1 + interest / 100 / frequency, frequency) - 1) * 100;
};

var convertAprToApyObj = function convertAprToApyObj(obj) {
  return _objectSpread(_objectSpread({}, obj), {}, {
    apy_1d: aprToApy(obj.apr_1d),
    apy_7d: aprToApy(obj.apr_7d),
    apy_14d: aprToApy(obj.apr_14d)
  });
};

var pickApr = function pickApr(_ref) {
  var lockup = _ref.lockup;
  return function (el) {
    var apr_1d = el.apr_1d,
        apr_7d = el.apr_7d,
        apr_14d = el.apr_14d,
        apy_1d = el.apy_1d,
        apy_7d = el.apy_7d,
        apy_14d = el.apy_14d,
        rest = (0, _objectWithoutProperties2["default"])(el, _excluded);

    if (lockup == '14') {
      return _objectSpread(_objectSpread({}, rest), {}, {
        apr_14d: apr_14d,
        apy_14d: apy_14d
      });
    }

    if (lockup == '1') {
      return _objectSpread(_objectSpread({}, rest), {}, {
        apr_1d: apr_1d,
        apy_1d: apy_1d
      });
    }

    if (lockup == '7') {
      return _objectSpread(_objectSpread({}, rest), {}, {
        apr_7d: apr_7d,
        apy_7d: apy_7d
      });
    }
  };
};

var getPoolAprs = /*#__PURE__*/function () {
  var _ref3 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(_ref2) {
    var api, validator, poolIds, _ref2$liquidityLimit, liquidityLimit, _ref2$lockup, lockup, filterProps, _yield$api$getLockabl, _yield$api$getLockabl2, d1, d7, d14, _yield$api$getIncenti, incentivized_pools, ldur, incentives, send, _loop, p;

    return _regenerator["default"].wrap(function _callee$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            api = _ref2.api, validator = _ref2.validator, poolIds = _ref2.poolIds, _ref2$liquidityLimit = _ref2.liquidityLimit, liquidityLimit = _ref2$liquidityLimit === void 0 ? 100000 : _ref2$liquidityLimit, _ref2$lockup = _ref2.lockup, lockup = _ref2$lockup === void 0 ? '14' : _ref2$lockup;
            // convert to string
            poolIds = poolIds.map(function (item) {
              return item + '';
            });
            filterProps = pickApr({
              lockup: lockup
            });
            _context2.next = 5;
            return api.getLockableDurations();

          case 5:
            _yield$api$getLockabl = _context2.sent;
            _yield$api$getLockabl2 = (0, _slicedToArray2["default"])(_yield$api$getLockabl.lockable_durations, 3);
            d1 = _yield$api$getLockabl2[0];
            d7 = _yield$api$getLockabl2[1];
            d14 = _yield$api$getLockabl2[2];
            _context2.next = 12;
            return api.getIncentivizedPools();

          case 12:
            _yield$api$getIncenti = _context2.sent;
            incentivized_pools = _yield$api$getIncenti.incentivized_pools;
            _context2.t0 = lockup;
            _context2.next = _context2.t0 === '1' ? 17 : _context2.t0 === '7' ? 19 : _context2.t0 === '14' ? 21 : 23;
            break;

          case 17:
            ldur = d1;
            return _context2.abrupt("break", 24);

          case 19:
            ldur = d7;
            return _context2.abrupt("break", 24);

          case 21:
            ldur = d14;
            return _context2.abrupt("break", 24);

          case 23:
            ldur = d14;

          case 24:
            incentives = incentivized_pools.filter(function (_ref4) {
              var pool_id = _ref4.pool_id,
                  lockable_duration = _ref4.lockable_duration;
              return poolIds.includes(pool_id) && lockable_duration === ldur;
            });
            send = [];
            _loop = /*#__PURE__*/_regenerator["default"].mark(function _loop(p) {
              var gaugeInfo, gauge, _yield$validator$getP, _yield$validator$getP2, apr_list, osmoIncentives, externalIncentives, futureIncentives, totalIncentives;

              return _regenerator["default"].wrap(function _loop$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      gaugeInfo = incentives.find(function (_ref5) {
                        var pool_id = _ref5.pool_id;
                        return pool_id == poolIds[p];
                      });
                      gauge = void 0;

                      if (!gaugeInfo) {
                        _context.next = 6;
                        break;
                      }

                      _context.next = 5;
                      return api.getGauge(gaugeInfo.gauge_id);

                    case 5:
                      gauge = _context.sent;

                    case 6:
                      _context.next = 8;
                      return validator.getPoolApr(poolIds[p]);

                    case 8:
                      _yield$validator$getP = _context.sent;
                      _yield$validator$getP2 = (0, _slicedToArray2["default"])(_yield$validator$getP, 1);
                      apr_list = _yield$validator$getP2[0].apr_list;
                      osmoIncentives = apr_list.filter(function (i) {
                        return new Date(i.start_date) <= new Date() && i.symbol == 'OSMO';
                      }).map(convertAprToApyObj).map(filterProps);
                      externalIncentives = apr_list.filter(function (i) {
                        return new Date(i.start_date) <= new Date() && i.symbol != 'OSMO';
                      }).map(convertAprToApyObj).map(filterProps);
                      futureIncentives = apr_list.filter(function (i) {
                        return new Date(i.start_date) > new Date();
                      }).map(convertAprToApyObj).map(filterProps);
                      totalIncentives = filterProps(convertAprToApyObj(apr_list.filter(function (i) {
                        return new Date(i.start_date) <= new Date();
                      }).reduce(function (m, incentive) {
                        m.apr_1d += incentive.apr_1d;
                        m.apr_7d += incentive.apr_7d;
                        m.apr_14d += incentive.apr_14d;
                        return m;
                      }, {
                        apr_1d: 0,
                        apr_7d: 0,
                        apr_14d: 0
                      })));
                      send.push({
                        poolId: poolIds[p],
                        osmoIncentives: osmoIncentives,
                        externalIncentives: externalIncentives,
                        futureIncentives: futureIncentives,
                        totalIncentives: totalIncentives,
                        gauge: gauge.gauge
                      });

                    case 16:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _loop);
            });
            p = 0;

          case 28:
            if (!(p < poolIds.length)) {
              _context2.next = 33;
              break;
            }

            return _context2.delegateYield(_loop(p), "t1", 30);

          case 30:
            p++;
            _context2.next = 28;
            break;

          case 33:
            return _context2.abrupt("return", send);

          case 34:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee);
  }));

  return function getPoolAprs(_x) {
    return _ref3.apply(this, arguments);
  };
}();

exports.getPoolAprs = getPoolAprs;