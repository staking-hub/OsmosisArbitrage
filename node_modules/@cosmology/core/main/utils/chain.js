"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPrice = exports.getOsmosisSymbolIbcName = exports.getOsmosisAssetInfoByDenom = exports.getOsmosisAssetInfo = exports.getOsmosisAssetIbcInfo = exports.getOsmosisAssetDenom = exports.getNameOfChain = exports.getCosmosAssetInfoByDenom = exports.getCosmosAssetInfo = exports.getChainByChainId = exports.getChain = exports.getBaseAndDisplayUnitsGenericCosmos = exports.getBaseAndDisplayUnitsByDenom = exports.getBaseAndDisplayUnits = exports.dollarValueToDisplayUnits = exports.dollarValueToDenomUnits = exports.displayUnitsToDollarValueByDenom = exports.displayUnitsToDollarValue = exports.displayUnitsToDenomUnits = exports.baseUnitsToDollarValueByDenom = exports.baseUnitsToDollarValue = exports.baseUnitsToDisplayUnitsByDenom = exports.baseUnitsToDisplayUnits = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _chainRegistry = require("chain-registry");

var _index = require("../assets/index");

var _osmo = require("./osmo");

var _unit = require("@keplr-wallet/unit");

var getCosmosAssetInfo = function getCosmosAssetInfo(symbol) {
  return _chainRegistry.assets.find(function (a) {
    return !!a.assets.find(function (i) {
      return i.symbol === symbol && i.type_asset !== 'ics20';
    });
  });
};

exports.getCosmosAssetInfo = getCosmosAssetInfo;

var getOsmosisAssetInfo = function getOsmosisAssetInfo(symbol) {
  return _index.assets.find(function (a) {
    return a.symbol === symbol && a.type_asset !== 'ics20';
  });
};

exports.getOsmosisAssetInfo = getOsmosisAssetInfo;

var getCosmosAssetInfoByDenom = function getCosmosAssetInfoByDenom(denom) {
  return _chainRegistry.assets.find(function (a) {
    return !!a.assets.find(function (asset) {
      return !!asset.denom_units.find(function (unit) {
        return unit.denom === denom;
      }) && asset.type_asset !== 'ics20';
    });
  });
};

exports.getCosmosAssetInfoByDenom = getCosmosAssetInfoByDenom;

var getOsmosisAssetInfoByDenom = function getOsmosisAssetInfoByDenom(denom) {
  return _index.assets.find(function (a) {
    return !!a.denom_units.find(function (unit) {
      return unit.denom === denom;
    }) && a.type_asset !== 'ics20';
  });
};

exports.getOsmosisAssetInfoByDenom = getOsmosisAssetInfoByDenom;

var getOsmosisAssetIbcInfo = function getOsmosisAssetIbcInfo(symbol) {
  var assetInfo = getOsmosisAssetInfo(symbol);
  return assetInfo === null || assetInfo === void 0 ? void 0 : assetInfo.ibc;
};

exports.getOsmosisAssetIbcInfo = getOsmosisAssetIbcInfo;

var getOsmosisAssetDenom = function getOsmosisAssetDenom(symbol) {
  var assetInfo = getOsmosisAssetInfo(symbol);
  return assetInfo === null || assetInfo === void 0 ? void 0 : assetInfo.base;
};

exports.getOsmosisAssetDenom = getOsmosisAssetDenom;

var getNameOfChain = function getNameOfChain(chain_id) {
  var chain = _chainRegistry.chains.find(function (c) {
    return c.chain_id === chain_id;
  });

  return chain === null || chain === void 0 ? void 0 : chain.chain_name;
};

exports.getNameOfChain = getNameOfChain;

var getChainByChainId = function getChainByChainId(chain_id) {
  var chain = _chainRegistry.chains.find(function (c) {
    return c.chain_id === chain_id;
  });

  return chain;
};

exports.getChainByChainId = getChainByChainId;

var getBaseAndDisplayUnitsGenericCosmos = function getBaseAndDisplayUnitsGenericCosmos(symbol) {
  var coinInfo = getCosmosAssetInfo(symbol);

  if (!coinInfo) {
    throw new Error("coin:".concat(symbol, " not found."));
  }

  var asset = coinInfo.assets.find(function (a) {
    return a.symbol === symbol;
  });

  if (!asset) {
    throw new Error("coin:".concat(symbol, " not found."));
  }

  var base = asset.denom_units.find(function (d) {
    return d.denom === asset.base;
  });
  var display = asset.denom_units.find(function (d) {
    return d.denom === asset.display;
  });

  if (!base || !display) {
    throw new Error("cannot find denom for coin ".concat(symbol));
  }

  return {
    base: base,
    display: display
  };
};

exports.getBaseAndDisplayUnitsGenericCosmos = getBaseAndDisplayUnitsGenericCosmos;

var getBaseAndDisplayUnits = function getBaseAndDisplayUnits(symbol) {
  var coinInfo = getOsmosisAssetInfo(symbol);

  if (!coinInfo) {
    var info = getBaseAndDisplayUnitsByDenom(symbol);
    if (info) return info;
    throw new Error("coin:".concat(symbol, " not found."));
  }

  var base = coinInfo.denom_units.find(function (d) {
    var _d$aliases;

    return d.denom === coinInfo.base || ((_d$aliases = d.aliases) === null || _d$aliases === void 0 ? void 0 : _d$aliases.includes(coinInfo.base));
  });
  var display = coinInfo.denom_units.find(function (d) {
    var _d$aliases2;

    return d.denom === coinInfo.display || ((_d$aliases2 = d.aliases) === null || _d$aliases2 === void 0 ? void 0 : _d$aliases2.includes(coinInfo.display));
  });

  if (!base || !display) {
    throw new Error("cannot find denom for coin ".concat(symbol));
  }

  return {
    base: base,
    display: display
  };
};

exports.getBaseAndDisplayUnits = getBaseAndDisplayUnits;

var getBaseAndDisplayUnitsByDenom = function getBaseAndDisplayUnitsByDenom(denom) {
  if (denom.startsWith('gamm')) {
    return {
      base: denom,
      display: 18
    };
  }

  var coinInfo = getOsmosisAssetInfoByDenom(denom);

  if (!coinInfo) {
    // look for generic cosmos coins
    var chainInfo = getCosmosAssetInfoByDenom(denom);

    if (!chainInfo || !chainInfo.assets) {
      throw new Error("coin:denom:".concat(denom, " not found."));
    }

    coinInfo = chainInfo.assets.find(function (asset) {
      return asset.base === denom || asset.display === denom;
    });

    if (!coinInfo) {
      throw new Error("coin:denom:".concat(denom, " not found."));
    }
  }

  var base = coinInfo.denom_units.find(function (d) {
    var _d$aliases3;

    return d.denom === coinInfo.base || ((_d$aliases3 = d.aliases) === null || _d$aliases3 === void 0 ? void 0 : _d$aliases3.includes(coinInfo.base));
  });
  var display = coinInfo.denom_units.find(function (d) {
    var _d$aliases4;

    return d.denom === coinInfo.display || ((_d$aliases4 = d.aliases) === null || _d$aliases4 === void 0 ? void 0 : _d$aliases4.includes(coinInfo.display));
  });

  if (!base || !display) {
    throw new Error("cannot find denom for coin ".concat(denom));
  }

  return {
    base: base,
    display: display
  };
};

exports.getBaseAndDisplayUnitsByDenom = getBaseAndDisplayUnitsByDenom;

var getOsmosisSymbolIbcName = function getOsmosisSymbolIbcName(symbol) {
  var coinInfo = getOsmosisAssetInfo(symbol);

  if (!coinInfo) {
    throw new Error("coin:".concat(symbol, " not found."));
  }

  return coinInfo.base;
};

exports.getOsmosisSymbolIbcName = getOsmosisSymbolIbcName;

var displayUnitsToDenomUnits = function displayUnitsToDenomUnits(symbol, amount) {
  var _getBaseAndDisplayUni = getBaseAndDisplayUnits(symbol),
      display = _getBaseAndDisplayUni.display;

  var a = new _unit.IntPretty(new _unit.Dec(amount));
  return a.moveDecimalPointRight(display.exponent).maxDecimals(16).locale(false).toString();
}; // TODO design how classes migrate to methods...


exports.displayUnitsToDenomUnits = displayUnitsToDenomUnits;

var getPrice = function getPrice(prices, symbol) {
  var denom = (0, _osmo.symbolToOsmoDenom)(symbol);
  return prices[denom] || 0;
};

exports.getPrice = getPrice;

var displayUnitsToDollarValue = function displayUnitsToDollarValue(prices, symbol, amount) {
  var price = getPrice(prices, symbol);
  var a = new _unit.Dec(amount);
  var p = new _unit.Dec(price);
  return a.mul(p).toString();
};

exports.displayUnitsToDollarValue = displayUnitsToDollarValue;

var displayUnitsToDollarValueByDenom = function displayUnitsToDollarValueByDenom(prices, denom, amount) {
  var price = prices[denom] || 0;
  var a = new _unit.Dec(amount);
  var p = new _unit.Dec(price);
  return a.mul(p).toString();
};

exports.displayUnitsToDollarValueByDenom = displayUnitsToDollarValueByDenom;

var baseUnitsToDollarValueByDenom = function baseUnitsToDollarValueByDenom(prices, denom, amount) {
  var displayAmount = baseUnitsToDisplayUnitsByDenom(denom, amount);
  return displayUnitsToDollarValueByDenom(prices, denom, displayAmount);
};

exports.baseUnitsToDollarValueByDenom = baseUnitsToDollarValueByDenom;

var baseUnitsToDollarValue = function baseUnitsToDollarValue(prices, symbol, amount) {
  var displayAmount = baseUnitsToDisplayUnits(symbol, amount);
  return displayUnitsToDollarValue(prices, symbol, displayAmount);
};

exports.baseUnitsToDollarValue = baseUnitsToDollarValue;

var dollarValueToDisplayUnits = function dollarValueToDisplayUnits(prices, symbol, amount) {
  var price = getPrice(prices, symbol);
  var a = new _unit.Dec(amount);
  var p = new _unit.Dec(price);
  return a.quo(p).toString();
};

exports.dollarValueToDisplayUnits = dollarValueToDisplayUnits;

var dollarValueToDenomUnits = function dollarValueToDenomUnits(prices, symbol, amount) {
  var display = dollarValueToDisplayUnits(prices, symbol, amount);
  return displayUnitsToDenomUnits(symbol, display);
};

exports.dollarValueToDenomUnits = dollarValueToDenomUnits;

var baseUnitsToDisplayUnits = function baseUnitsToDisplayUnits(symbol, amount) {
  var _getBaseAndDisplayUni2 = getBaseAndDisplayUnits(symbol),
      display = _getBaseAndDisplayUni2.display;

  var a = new _unit.IntPretty(new _unit.Dec(amount));
  return a.moveDecimalPointLeft(display.exponent).maxDecimals(16).locale(false).toString();
};

exports.baseUnitsToDisplayUnits = baseUnitsToDisplayUnits;

var baseUnitsToDisplayUnitsByDenom = function baseUnitsToDisplayUnitsByDenom(denom, amount) {
  var _getBaseAndDisplayUni3 = getBaseAndDisplayUnitsByDenom(denom),
      display = _getBaseAndDisplayUni3.display;

  var a = new _unit.IntPretty(new _unit.Dec(amount));
  return a.moveDecimalPointLeft(display.exponent).maxDecimals(16).locale(false).toString();
};

exports.baseUnitsToDisplayUnitsByDenom = baseUnitsToDisplayUnitsByDenom;

var getChain = /*#__PURE__*/function () {
  var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(_ref) {
    var token, chainFromAssets, chain;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            token = _ref.token;
            chainFromAssets = _chainRegistry.assets.find(function (_ref3) {
              var assets = _ref3.assets;
              var found = assets.find(function (_ref4) {
                var symbol = _ref4.symbol;
                return symbol === token;
              });
              if (found && found.type_asset !== 'ics20') return true;
            });
            chain = _chainRegistry.chains.find(function (_ref5) {
              var chain_name = _ref5.chain_name;
              return chain_name == chainFromAssets.chain_name;
            });
            return _context.abrupt("return", chain);

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getChain(_x) {
    return _ref2.apply(this, arguments);
  };
}();

exports.getChain = getChain;