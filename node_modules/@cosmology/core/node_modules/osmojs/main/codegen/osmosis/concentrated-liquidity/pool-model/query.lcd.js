"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LCDQueryClient = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _helpers = require("../../../helpers");
var LCDQueryClient = /*#__PURE__*/function () {
  function LCDQueryClient(_ref) {
    var requestClient = _ref.requestClient;
    (0, _classCallCheck2["default"])(this, LCDQueryClient);
    (0, _defineProperty2["default"])(this, "req", void 0);
    this.req = requestClient;
    this.pools = this.pools.bind(this);
    this.params = this.params.bind(this);
    this.userPositions = this.userPositions.bind(this);
    this.totalLiquidityForRange = this.totalLiquidityForRange.bind(this);
    this.liquidityNetInDirection = this.liquidityNetInDirection.bind(this);
    this.claimableFees = this.claimableFees.bind(this);
    this.positionById = this.positionById.bind(this);
  }
  /* Pools returns all concentrated liquidity pools */
  (0, _createClass2["default"])(LCDQueryClient, [{
    key: "pools",
    value: function () {
      var _pools = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        var params,
          options,
          endpoint,
          _args = arguments;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                params = _args.length > 0 && _args[0] !== undefined ? _args[0] : {
                  pagination: undefined
                };
                options = {
                  params: {}
                };
                if (typeof (params === null || params === void 0 ? void 0 : params.pagination) !== "undefined") {
                  (0, _helpers.setPaginationParams)(options, params.pagination);
                }
                endpoint = "osmosis/concentratedliquidity/v1beta1/pools";
                _context.next = 6;
                return this.req.get(endpoint, options);
              case 6:
                return _context.abrupt("return", _context.sent);
              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
      function pools() {
        return _pools.apply(this, arguments);
      }
      return pools;
    }() /* Params returns concentrated liquidity module params. */
  }, {
    key: "params",
    value: function () {
      var _params2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
        var _params,
          endpoint,
          _args2 = arguments;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _params = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};
                endpoint = "osmosis/concentratedliquidity/v1beta1/params";
                _context2.next = 4;
                return this.req.get(endpoint);
              case 4:
                return _context2.abrupt("return", _context2.sent);
              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));
      function params() {
        return _params2.apply(this, arguments);
      }
      return params;
    }() /* UserPositions returns all concentrated postitions of some address. */
  }, {
    key: "userPositions",
    value: function () {
      var _userPositions = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(params) {
        var options, endpoint;
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                options = {
                  params: {}
                };
                if (typeof (params === null || params === void 0 ? void 0 : params.poolId) !== "undefined") {
                  options.params.pool_id = params.poolId;
                }
                endpoint = "osmosis/concentratedliquidity/v1beta1/positions/".concat(params.address);
                _context3.next = 5;
                return this.req.get(endpoint, options);
              case 5:
                return _context3.abrupt("return", _context3.sent);
              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));
      function userPositions(_x) {
        return _userPositions.apply(this, arguments);
      }
      return userPositions;
    }() /* TotalLiquidityForRange the amount of liquidity existing within given range. */
  }, {
    key: "totalLiquidityForRange",
    value: function () {
      var _totalLiquidityForRange = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(params) {
        var options, endpoint;
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                options = {
                  params: {}
                };
                if (typeof (params === null || params === void 0 ? void 0 : params.poolId) !== "undefined") {
                  options.params.pool_id = params.poolId;
                }
                endpoint = "osmosis/concentratedliquidity/v1beta1/total_liquidity_for_range";
                _context4.next = 5;
                return this.req.get(endpoint, options);
              case 5:
                return _context4.abrupt("return", _context4.sent);
              case 6:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));
      function totalLiquidityForRange(_x2) {
        return _totalLiquidityForRange.apply(this, arguments);
      }
      return totalLiquidityForRange;
    }() /* LiquidityNetInDirection returns liquidity net in the direction given.
         Uses the bound if specified, if not uses either min tick / max tick
         depending on the direction. */
  }, {
    key: "liquidityNetInDirection",
    value: function () {
      var _liquidityNetInDirection = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5(params) {
        var options, endpoint;
        return _regenerator["default"].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                options = {
                  params: {}
                };
                if (typeof (params === null || params === void 0 ? void 0 : params.poolId) !== "undefined") {
                  options.params.pool_id = params.poolId;
                }
                if (typeof (params === null || params === void 0 ? void 0 : params.tokenIn) !== "undefined") {
                  options.params.token_in = params.tokenIn;
                }
                if (typeof (params === null || params === void 0 ? void 0 : params.startTick) !== "undefined") {
                  options.params.start_tick = params.startTick;
                }
                if (typeof (params === null || params === void 0 ? void 0 : params.boundTick) !== "undefined") {
                  options.params.bound_tick = params.boundTick;
                }
                endpoint = "osmosis/concentratedliquidity/v1beta1/query_liquidity_net_in_direction";
                _context5.next = 8;
                return this.req.get(endpoint, options);
              case 8:
                return _context5.abrupt("return", _context5.sent);
              case 9:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));
      function liquidityNetInDirection(_x3) {
        return _liquidityNetInDirection.apply(this, arguments);
      }
      return liquidityNetInDirection;
    }() /* ClaimableFees returns the amount of fees that can be claimed by a position
         with the given id. */
  }, {
    key: "claimableFees",
    value: function () {
      var _claimableFees = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee6(params) {
        var options, endpoint;
        return _regenerator["default"].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                options = {
                  params: {}
                };
                if (typeof (params === null || params === void 0 ? void 0 : params.positionId) !== "undefined") {
                  options.params.position_id = params.positionId;
                }
                endpoint = "osmosis/concentratedliquidity/v1beta1/claimable_fees";
                _context6.next = 5;
                return this.req.get(endpoint, options);
              case 5:
                return _context6.abrupt("return", _context6.sent);
              case 6:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));
      function claimableFees(_x4) {
        return _claimableFees.apply(this, arguments);
      }
      return claimableFees;
    }() /* PositionById returns a position with the given id. */
  }, {
    key: "positionById",
    value: function () {
      var _positionById = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee7(params) {
        var options, endpoint;
        return _regenerator["default"].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                options = {
                  params: {}
                };
                if (typeof (params === null || params === void 0 ? void 0 : params.positionId) !== "undefined") {
                  options.params.position_id = params.positionId;
                }
                endpoint = "osmosis/concentratedliquidity/v1beta1/position_by_id";
                _context7.next = 5;
                return this.req.get(endpoint, options);
              case 5:
                return _context7.abrupt("return", _context7.sent);
              case 6:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));
      function positionById(_x5) {
        return _positionById.apply(this, arguments);
      }
      return positionById;
    }()
  }]);
  return LCDQueryClient;
}();
exports.LCDQueryClient = LCDQueryClient;