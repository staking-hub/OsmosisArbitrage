"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRpcQueryExtension = exports.QueryClientImpl = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _m0 = _interopRequireWildcard(require("protobufjs/minimal"));
var _stargate = require("@cosmjs/stargate");
var _query = require("./query");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var QueryClientImpl = /*#__PURE__*/function () {
  function QueryClientImpl(rpc) {
    (0, _classCallCheck2["default"])(this, QueryClientImpl);
    (0, _defineProperty2["default"])(this, "rpc", void 0);
    this.rpc = rpc;
    this.params = this.params.bind(this);
    this.getProtoRevNumberOfTrades = this.getProtoRevNumberOfTrades.bind(this);
    this.getProtoRevProfitsByDenom = this.getProtoRevProfitsByDenom.bind(this);
    this.getProtoRevAllProfits = this.getProtoRevAllProfits.bind(this);
    this.getProtoRevStatisticsByRoute = this.getProtoRevStatisticsByRoute.bind(this);
    this.getProtoRevAllRouteStatistics = this.getProtoRevAllRouteStatistics.bind(this);
    this.getProtoRevTokenPairArbRoutes = this.getProtoRevTokenPairArbRoutes.bind(this);
    this.getProtoRevAdminAccount = this.getProtoRevAdminAccount.bind(this);
    this.getProtoRevDeveloperAccount = this.getProtoRevDeveloperAccount.bind(this);
    this.getProtoRevPoolWeights = this.getProtoRevPoolWeights.bind(this);
    this.getProtoRevMaxPoolPointsPerTx = this.getProtoRevMaxPoolPointsPerTx.bind(this);
    this.getProtoRevMaxPoolPointsPerBlock = this.getProtoRevMaxPoolPointsPerBlock.bind(this);
    this.getProtoRevBaseDenoms = this.getProtoRevBaseDenoms.bind(this);
    this.getProtoRevEnabled = this.getProtoRevEnabled.bind(this);
  }
  (0, _createClass2["default"])(QueryClientImpl, [{
    key: "params",
    value: function params() {
      var request = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var data = _query.QueryParamsRequest.encode(request).finish();
      var promise = this.rpc.request("osmosis.protorev.v1beta1.Query", "Params", data);
      return promise.then(function (data) {
        return _query.QueryParamsResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "getProtoRevNumberOfTrades",
    value: function getProtoRevNumberOfTrades() {
      var request = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var data = _query.QueryGetProtoRevNumberOfTradesRequest.encode(request).finish();
      var promise = this.rpc.request("osmosis.protorev.v1beta1.Query", "GetProtoRevNumberOfTrades", data);
      return promise.then(function (data) {
        return _query.QueryGetProtoRevNumberOfTradesResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "getProtoRevProfitsByDenom",
    value: function getProtoRevProfitsByDenom(request) {
      var data = _query.QueryGetProtoRevProfitsByDenomRequest.encode(request).finish();
      var promise = this.rpc.request("osmosis.protorev.v1beta1.Query", "GetProtoRevProfitsByDenom", data);
      return promise.then(function (data) {
        return _query.QueryGetProtoRevProfitsByDenomResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "getProtoRevAllProfits",
    value: function getProtoRevAllProfits() {
      var request = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var data = _query.QueryGetProtoRevAllProfitsRequest.encode(request).finish();
      var promise = this.rpc.request("osmosis.protorev.v1beta1.Query", "GetProtoRevAllProfits", data);
      return promise.then(function (data) {
        return _query.QueryGetProtoRevAllProfitsResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "getProtoRevStatisticsByRoute",
    value: function getProtoRevStatisticsByRoute(request) {
      var data = _query.QueryGetProtoRevStatisticsByRouteRequest.encode(request).finish();
      var promise = this.rpc.request("osmosis.protorev.v1beta1.Query", "GetProtoRevStatisticsByRoute", data);
      return promise.then(function (data) {
        return _query.QueryGetProtoRevStatisticsByRouteResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "getProtoRevAllRouteStatistics",
    value: function getProtoRevAllRouteStatistics() {
      var request = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var data = _query.QueryGetProtoRevAllRouteStatisticsRequest.encode(request).finish();
      var promise = this.rpc.request("osmosis.protorev.v1beta1.Query", "GetProtoRevAllRouteStatistics", data);
      return promise.then(function (data) {
        return _query.QueryGetProtoRevAllRouteStatisticsResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "getProtoRevTokenPairArbRoutes",
    value: function getProtoRevTokenPairArbRoutes() {
      var request = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var data = _query.QueryGetProtoRevTokenPairArbRoutesRequest.encode(request).finish();
      var promise = this.rpc.request("osmosis.protorev.v1beta1.Query", "GetProtoRevTokenPairArbRoutes", data);
      return promise.then(function (data) {
        return _query.QueryGetProtoRevTokenPairArbRoutesResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "getProtoRevAdminAccount",
    value: function getProtoRevAdminAccount() {
      var request = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var data = _query.QueryGetProtoRevAdminAccountRequest.encode(request).finish();
      var promise = this.rpc.request("osmosis.protorev.v1beta1.Query", "GetProtoRevAdminAccount", data);
      return promise.then(function (data) {
        return _query.QueryGetProtoRevAdminAccountResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "getProtoRevDeveloperAccount",
    value: function getProtoRevDeveloperAccount() {
      var request = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var data = _query.QueryGetProtoRevDeveloperAccountRequest.encode(request).finish();
      var promise = this.rpc.request("osmosis.protorev.v1beta1.Query", "GetProtoRevDeveloperAccount", data);
      return promise.then(function (data) {
        return _query.QueryGetProtoRevDeveloperAccountResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "getProtoRevPoolWeights",
    value: function getProtoRevPoolWeights() {
      var request = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var data = _query.QueryGetProtoRevPoolWeightsRequest.encode(request).finish();
      var promise = this.rpc.request("osmosis.protorev.v1beta1.Query", "GetProtoRevPoolWeights", data);
      return promise.then(function (data) {
        return _query.QueryGetProtoRevPoolWeightsResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "getProtoRevMaxPoolPointsPerTx",
    value: function getProtoRevMaxPoolPointsPerTx() {
      var request = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var data = _query.QueryGetProtoRevMaxPoolPointsPerTxRequest.encode(request).finish();
      var promise = this.rpc.request("osmosis.protorev.v1beta1.Query", "GetProtoRevMaxPoolPointsPerTx", data);
      return promise.then(function (data) {
        return _query.QueryGetProtoRevMaxPoolPointsPerTxResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "getProtoRevMaxPoolPointsPerBlock",
    value: function getProtoRevMaxPoolPointsPerBlock() {
      var request = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var data = _query.QueryGetProtoRevMaxPoolPointsPerBlockRequest.encode(request).finish();
      var promise = this.rpc.request("osmosis.protorev.v1beta1.Query", "GetProtoRevMaxPoolPointsPerBlock", data);
      return promise.then(function (data) {
        return _query.QueryGetProtoRevMaxPoolPointsPerBlockResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "getProtoRevBaseDenoms",
    value: function getProtoRevBaseDenoms() {
      var request = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var data = _query.QueryGetProtoRevBaseDenomsRequest.encode(request).finish();
      var promise = this.rpc.request("osmosis.protorev.v1beta1.Query", "GetProtoRevBaseDenoms", data);
      return promise.then(function (data) {
        return _query.QueryGetProtoRevBaseDenomsResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "getProtoRevEnabled",
    value: function getProtoRevEnabled() {
      var request = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var data = _query.QueryGetProtoRevEnabledRequest.encode(request).finish();
      var promise = this.rpc.request("osmosis.protorev.v1beta1.Query", "GetProtoRevEnabled", data);
      return promise.then(function (data) {
        return _query.QueryGetProtoRevEnabledResponse.decode(new _m0.Reader(data));
      });
    }
  }]);
  return QueryClientImpl;
}();
exports.QueryClientImpl = QueryClientImpl;
var createRpcQueryExtension = function createRpcQueryExtension(base) {
  var rpc = (0, _stargate.createProtobufRpcClient)(base);
  var queryService = new QueryClientImpl(rpc);
  return {
    params: function params(request) {
      return queryService.params(request);
    },
    getProtoRevNumberOfTrades: function getProtoRevNumberOfTrades(request) {
      return queryService.getProtoRevNumberOfTrades(request);
    },
    getProtoRevProfitsByDenom: function getProtoRevProfitsByDenom(request) {
      return queryService.getProtoRevProfitsByDenom(request);
    },
    getProtoRevAllProfits: function getProtoRevAllProfits(request) {
      return queryService.getProtoRevAllProfits(request);
    },
    getProtoRevStatisticsByRoute: function getProtoRevStatisticsByRoute(request) {
      return queryService.getProtoRevStatisticsByRoute(request);
    },
    getProtoRevAllRouteStatistics: function getProtoRevAllRouteStatistics(request) {
      return queryService.getProtoRevAllRouteStatistics(request);
    },
    getProtoRevTokenPairArbRoutes: function getProtoRevTokenPairArbRoutes(request) {
      return queryService.getProtoRevTokenPairArbRoutes(request);
    },
    getProtoRevAdminAccount: function getProtoRevAdminAccount(request) {
      return queryService.getProtoRevAdminAccount(request);
    },
    getProtoRevDeveloperAccount: function getProtoRevDeveloperAccount(request) {
      return queryService.getProtoRevDeveloperAccount(request);
    },
    getProtoRevPoolWeights: function getProtoRevPoolWeights(request) {
      return queryService.getProtoRevPoolWeights(request);
    },
    getProtoRevMaxPoolPointsPerTx: function getProtoRevMaxPoolPointsPerTx(request) {
      return queryService.getProtoRevMaxPoolPointsPerTx(request);
    },
    getProtoRevMaxPoolPointsPerBlock: function getProtoRevMaxPoolPointsPerBlock(request) {
      return queryService.getProtoRevMaxPoolPointsPerBlock(request);
    },
    getProtoRevBaseDenoms: function getProtoRevBaseDenoms(request) {
      return queryService.getProtoRevBaseDenoms(request);
    },
    getProtoRevEnabled: function getProtoRevEnabled(request) {
      return queryService.getProtoRevEnabled(request);
    }
  };
};
exports.createRpcQueryExtension = createRpcQueryExtension;