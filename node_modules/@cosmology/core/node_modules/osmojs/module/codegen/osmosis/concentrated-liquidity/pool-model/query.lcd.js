import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { setPaginationParams } from "../../../helpers";
export class LCDQueryClient {
  constructor({
    requestClient
  }) {
    _defineProperty(this, "req", void 0);
    this.req = requestClient;
    this.pools = this.pools.bind(this);
    this.params = this.params.bind(this);
    this.userPositions = this.userPositions.bind(this);
    this.totalLiquidityForRange = this.totalLiquidityForRange.bind(this);
    this.liquidityNetInDirection = this.liquidityNetInDirection.bind(this);
    this.claimableFees = this.claimableFees.bind(this);
    this.positionById = this.positionById.bind(this);
  }
  /* Pools returns all concentrated liquidity pools */

  async pools(params = {
    pagination: undefined
  }) {
    const options = {
      params: {}
    };
    if (typeof (params === null || params === void 0 ? void 0 : params.pagination) !== "undefined") {
      setPaginationParams(options, params.pagination);
    }
    const endpoint = `osmosis/concentratedliquidity/v1beta1/pools`;
    return await this.req.get(endpoint, options);
  }
  /* Params returns concentrated liquidity module params. */

  async params(_params = {}) {
    const endpoint = `osmosis/concentratedliquidity/v1beta1/params`;
    return await this.req.get(endpoint);
  }
  /* UserPositions returns all concentrated postitions of some address. */

  async userPositions(params) {
    const options = {
      params: {}
    };
    if (typeof (params === null || params === void 0 ? void 0 : params.poolId) !== "undefined") {
      options.params.pool_id = params.poolId;
    }
    const endpoint = `osmosis/concentratedliquidity/v1beta1/positions/${params.address}`;
    return await this.req.get(endpoint, options);
  }
  /* TotalLiquidityForRange the amount of liquidity existing within given range. */

  async totalLiquidityForRange(params) {
    const options = {
      params: {}
    };
    if (typeof (params === null || params === void 0 ? void 0 : params.poolId) !== "undefined") {
      options.params.pool_id = params.poolId;
    }
    const endpoint = `osmosis/concentratedliquidity/v1beta1/total_liquidity_for_range`;
    return await this.req.get(endpoint, options);
  }
  /* LiquidityNetInDirection returns liquidity net in the direction given.
   Uses the bound if specified, if not uses either min tick / max tick
   depending on the direction. */

  async liquidityNetInDirection(params) {
    const options = {
      params: {}
    };
    if (typeof (params === null || params === void 0 ? void 0 : params.poolId) !== "undefined") {
      options.params.pool_id = params.poolId;
    }
    if (typeof (params === null || params === void 0 ? void 0 : params.tokenIn) !== "undefined") {
      options.params.token_in = params.tokenIn;
    }
    if (typeof (params === null || params === void 0 ? void 0 : params.startTick) !== "undefined") {
      options.params.start_tick = params.startTick;
    }
    if (typeof (params === null || params === void 0 ? void 0 : params.boundTick) !== "undefined") {
      options.params.bound_tick = params.boundTick;
    }
    const endpoint = `osmosis/concentratedliquidity/v1beta1/query_liquidity_net_in_direction`;
    return await this.req.get(endpoint, options);
  }
  /* ClaimableFees returns the amount of fees that can be claimed by a position
   with the given id. */

  async claimableFees(params) {
    const options = {
      params: {}
    };
    if (typeof (params === null || params === void 0 ? void 0 : params.positionId) !== "undefined") {
      options.params.position_id = params.positionId;
    }
    const endpoint = `osmosis/concentratedliquidity/v1beta1/claimable_fees`;
    return await this.req.get(endpoint, options);
  }
  /* PositionById returns a position with the given id. */

  async positionById(params) {
    const options = {
      params: {}
    };
    if (typeof (params === null || params === void 0 ? void 0 : params.positionId) !== "undefined") {
      options.params.position_id = params.positionId;
    }
    const endpoint = `osmosis/concentratedliquidity/v1beta1/position_by_id`;
    return await this.req.get(endpoint, options);
  }
}