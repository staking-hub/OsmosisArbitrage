import { Duration } from "../../google/protobuf/duration";
import { Timestamp } from "../../google/protobuf/timestamp";
import { Long, toTimestamp, fromTimestamp } from "../../helpers";
import * as _m0 from "protobufjs/minimal";
/**
 * IncentiveRecord is the high-level struct we use to deal with an independent
 * incentive being distributed on a pool. Note that PoolId, Denom, and MinUptime
 * are included in the key so we avoid storing them in state, hence the
 * distinction between IncentiveRecord and IncentiveRecordBody.
 */

function createBaseIncentiveRecord() {
  return {
    poolId: Long.UZERO,
    incentiveDenom: "",
    incentiveCreatorAddr: "",
    incentiveRecordBody: undefined,
    minUptime: undefined
  };
}
export const IncentiveRecord = {
  typeUrl: "/osmosis.concentratedliquidity.v1beta1.IncentiveRecord",
  encode(message, writer = _m0.Writer.create()) {
    if (!message.poolId.isZero()) {
      writer.uint32(8).uint64(message.poolId);
    }
    if (message.incentiveDenom !== "") {
      writer.uint32(18).string(message.incentiveDenom);
    }
    if (message.incentiveCreatorAddr !== "") {
      writer.uint32(26).string(message.incentiveCreatorAddr);
    }
    if (message.incentiveRecordBody !== undefined) {
      IncentiveRecordBody.encode(message.incentiveRecordBody, writer.uint32(34).fork()).ldelim();
    }
    if (message.minUptime !== undefined) {
      Duration.encode(message.minUptime, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIncentiveRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.poolId = reader.uint64();
          break;
        case 2:
          message.incentiveDenom = reader.string();
          break;
        case 3:
          message.incentiveCreatorAddr = reader.string();
          break;
        case 4:
          message.incentiveRecordBody = IncentiveRecordBody.decode(reader, reader.uint32());
          break;
        case 5:
          message.minUptime = Duration.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$incentiveDeno, _object$incentiveCrea;
    const message = createBaseIncentiveRecord();
    message.poolId = object.poolId !== undefined && object.poolId !== null ? Long.fromValue(object.poolId) : Long.UZERO;
    message.incentiveDenom = (_object$incentiveDeno = object.incentiveDenom) !== null && _object$incentiveDeno !== void 0 ? _object$incentiveDeno : "";
    message.incentiveCreatorAddr = (_object$incentiveCrea = object.incentiveCreatorAddr) !== null && _object$incentiveCrea !== void 0 ? _object$incentiveCrea : "";
    message.incentiveRecordBody = object.incentiveRecordBody !== undefined && object.incentiveRecordBody !== null ? IncentiveRecordBody.fromPartial(object.incentiveRecordBody) : undefined;
    message.minUptime = object.minUptime !== undefined && object.minUptime !== null ? Duration.fromPartial(object.minUptime) : undefined;
    return message;
  },
  fromAmino(object) {
    return {
      poolId: Long.fromString(object.pool_id),
      incentiveDenom: object.incentive_denom,
      incentiveCreatorAddr: object.incentive_creator_addr,
      incentiveRecordBody: object !== null && object !== void 0 && object.incentive_record_body ? IncentiveRecordBody.fromAmino(object.incentive_record_body) : undefined,
      minUptime: object !== null && object !== void 0 && object.min_uptime ? Duration.fromAmino(object.min_uptime) : undefined
    };
  },
  toAmino(message) {
    const obj = {};
    obj.pool_id = message.poolId ? message.poolId.toString() : undefined;
    obj.incentive_denom = message.incentiveDenom;
    obj.incentive_creator_addr = message.incentiveCreatorAddr;
    obj.incentive_record_body = message.incentiveRecordBody ? IncentiveRecordBody.toAmino(message.incentiveRecordBody) : undefined;
    obj.min_uptime = message.minUptime ? Duration.toAmino(message.minUptime) : undefined;
    return obj;
  },
  fromAminoMsg(object) {
    return IncentiveRecord.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/concentratedliquidity/incentive-record",
      value: IncentiveRecord.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return IncentiveRecord.decode(message.value);
  },
  toProto(message) {
    return IncentiveRecord.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.concentratedliquidity.v1beta1.IncentiveRecord",
      value: IncentiveRecord.encode(message).finish()
    };
  }
};
function createBaseIncentiveRecordBody() {
  return {
    remainingAmount: "",
    emissionRate: "",
    startTime: undefined
  };
}
export const IncentiveRecordBody = {
  typeUrl: "/osmosis.concentratedliquidity.v1beta1.IncentiveRecordBody",
  encode(message, writer = _m0.Writer.create()) {
    if (message.remainingAmount !== "") {
      writer.uint32(10).string(message.remainingAmount);
    }
    if (message.emissionRate !== "") {
      writer.uint32(18).string(message.emissionRate);
    }
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIncentiveRecordBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.remainingAmount = reader.string();
          break;
        case 2:
          message.emissionRate = reader.string();
          break;
        case 3:
          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$remainingAmou, _object$emissionRate, _object$startTime;
    const message = createBaseIncentiveRecordBody();
    message.remainingAmount = (_object$remainingAmou = object.remainingAmount) !== null && _object$remainingAmou !== void 0 ? _object$remainingAmou : "";
    message.emissionRate = (_object$emissionRate = object.emissionRate) !== null && _object$emissionRate !== void 0 ? _object$emissionRate : "";
    message.startTime = (_object$startTime = object.startTime) !== null && _object$startTime !== void 0 ? _object$startTime : undefined;
    return message;
  },
  fromAmino(object) {
    return {
      remainingAmount: object.remaining_amount,
      emissionRate: object.emission_rate,
      startTime: object !== null && object !== void 0 && object.start_time ? Timestamp.fromAmino(object.start_time) : undefined
    };
  },
  toAmino(message) {
    const obj = {};
    obj.remaining_amount = message.remainingAmount;
    obj.emission_rate = message.emissionRate;
    obj.start_time = message.startTime ? Timestamp.toAmino(message.startTime) : undefined;
    return obj;
  },
  fromAminoMsg(object) {
    return IncentiveRecordBody.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/concentratedliquidity/incentive-record-body",
      value: IncentiveRecordBody.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return IncentiveRecordBody.decode(message.value);
  },
  toProto(message) {
    return IncentiveRecordBody.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.concentratedliquidity.v1beta1.IncentiveRecordBody",
      value: IncentiveRecordBody.encode(message).finish()
    };
  }
};