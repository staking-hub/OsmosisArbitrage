import { Coin } from "../../cosmos/base/v1beta1/coin";
import { Timestamp } from "../../google/protobuf/timestamp";
import { Long, toTimestamp, fromTimestamp } from "../../helpers";
import * as _m0 from "protobufjs/minimal";
function createBaseMsgSuperfluidDelegate() {
  return {
    sender: "",
    lockId: Long.UZERO,
    valAddr: ""
  };
}
export const MsgSuperfluidDelegate = {
  typeUrl: "/osmosis.superfluid.MsgSuperfluidDelegate",
  encode(message, writer = _m0.Writer.create()) {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (!message.lockId.isZero()) {
      writer.uint32(16).uint64(message.lockId);
    }
    if (message.valAddr !== "") {
      writer.uint32(26).string(message.valAddr);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSuperfluidDelegate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sender = reader.string();
          break;
        case 2:
          message.lockId = reader.uint64();
          break;
        case 3:
          message.valAddr = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$sender, _object$valAddr;
    const message = createBaseMsgSuperfluidDelegate();
    message.sender = (_object$sender = object.sender) !== null && _object$sender !== void 0 ? _object$sender : "";
    message.lockId = object.lockId !== undefined && object.lockId !== null ? Long.fromValue(object.lockId) : Long.UZERO;
    message.valAddr = (_object$valAddr = object.valAddr) !== null && _object$valAddr !== void 0 ? _object$valAddr : "";
    return message;
  },
  fromAmino(object) {
    return {
      sender: object.sender,
      lockId: Long.fromString(object.lock_id),
      valAddr: object.val_addr
    };
  },
  toAmino(message) {
    const obj = {};
    obj.sender = message.sender;
    obj.lock_id = message.lockId ? message.lockId.toString() : undefined;
    obj.val_addr = message.valAddr;
    return obj;
  },
  fromAminoMsg(object) {
    return MsgSuperfluidDelegate.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/superfluid-delegate",
      value: MsgSuperfluidDelegate.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return MsgSuperfluidDelegate.decode(message.value);
  },
  toProto(message) {
    return MsgSuperfluidDelegate.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.superfluid.MsgSuperfluidDelegate",
      value: MsgSuperfluidDelegate.encode(message).finish()
    };
  }
};
function createBaseMsgSuperfluidDelegateResponse() {
  return {};
}
export const MsgSuperfluidDelegateResponse = {
  typeUrl: "/osmosis.superfluid.MsgSuperfluidDelegateResponse",
  encode(_, writer = _m0.Writer.create()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSuperfluidDelegateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(_) {
    const message = createBaseMsgSuperfluidDelegateResponse();
    return message;
  },
  fromAmino(_) {
    return {};
  },
  toAmino(_) {
    const obj = {};
    return obj;
  },
  fromAminoMsg(object) {
    return MsgSuperfluidDelegateResponse.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/superfluid-delegate-response",
      value: MsgSuperfluidDelegateResponse.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return MsgSuperfluidDelegateResponse.decode(message.value);
  },
  toProto(message) {
    return MsgSuperfluidDelegateResponse.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.superfluid.MsgSuperfluidDelegateResponse",
      value: MsgSuperfluidDelegateResponse.encode(message).finish()
    };
  }
};
function createBaseMsgSuperfluidUndelegate() {
  return {
    sender: "",
    lockId: Long.UZERO
  };
}
export const MsgSuperfluidUndelegate = {
  typeUrl: "/osmosis.superfluid.MsgSuperfluidUndelegate",
  encode(message, writer = _m0.Writer.create()) {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (!message.lockId.isZero()) {
      writer.uint32(16).uint64(message.lockId);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSuperfluidUndelegate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sender = reader.string();
          break;
        case 2:
          message.lockId = reader.uint64();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$sender2;
    const message = createBaseMsgSuperfluidUndelegate();
    message.sender = (_object$sender2 = object.sender) !== null && _object$sender2 !== void 0 ? _object$sender2 : "";
    message.lockId = object.lockId !== undefined && object.lockId !== null ? Long.fromValue(object.lockId) : Long.UZERO;
    return message;
  },
  fromAmino(object) {
    return {
      sender: object.sender,
      lockId: Long.fromString(object.lock_id)
    };
  },
  toAmino(message) {
    const obj = {};
    obj.sender = message.sender;
    obj.lock_id = message.lockId ? message.lockId.toString() : undefined;
    return obj;
  },
  fromAminoMsg(object) {
    return MsgSuperfluidUndelegate.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/superfluid-undelegate",
      value: MsgSuperfluidUndelegate.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return MsgSuperfluidUndelegate.decode(message.value);
  },
  toProto(message) {
    return MsgSuperfluidUndelegate.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.superfluid.MsgSuperfluidUndelegate",
      value: MsgSuperfluidUndelegate.encode(message).finish()
    };
  }
};
function createBaseMsgSuperfluidUndelegateResponse() {
  return {};
}
export const MsgSuperfluidUndelegateResponse = {
  typeUrl: "/osmosis.superfluid.MsgSuperfluidUndelegateResponse",
  encode(_, writer = _m0.Writer.create()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSuperfluidUndelegateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(_) {
    const message = createBaseMsgSuperfluidUndelegateResponse();
    return message;
  },
  fromAmino(_) {
    return {};
  },
  toAmino(_) {
    const obj = {};
    return obj;
  },
  fromAminoMsg(object) {
    return MsgSuperfluidUndelegateResponse.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/superfluid-undelegate-response",
      value: MsgSuperfluidUndelegateResponse.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return MsgSuperfluidUndelegateResponse.decode(message.value);
  },
  toProto(message) {
    return MsgSuperfluidUndelegateResponse.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.superfluid.MsgSuperfluidUndelegateResponse",
      value: MsgSuperfluidUndelegateResponse.encode(message).finish()
    };
  }
};
function createBaseMsgSuperfluidUnbondLock() {
  return {
    sender: "",
    lockId: Long.UZERO
  };
}
export const MsgSuperfluidUnbondLock = {
  typeUrl: "/osmosis.superfluid.MsgSuperfluidUnbondLock",
  encode(message, writer = _m0.Writer.create()) {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (!message.lockId.isZero()) {
      writer.uint32(16).uint64(message.lockId);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSuperfluidUnbondLock();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sender = reader.string();
          break;
        case 2:
          message.lockId = reader.uint64();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$sender3;
    const message = createBaseMsgSuperfluidUnbondLock();
    message.sender = (_object$sender3 = object.sender) !== null && _object$sender3 !== void 0 ? _object$sender3 : "";
    message.lockId = object.lockId !== undefined && object.lockId !== null ? Long.fromValue(object.lockId) : Long.UZERO;
    return message;
  },
  fromAmino(object) {
    return {
      sender: object.sender,
      lockId: Long.fromString(object.lock_id)
    };
  },
  toAmino(message) {
    const obj = {};
    obj.sender = message.sender;
    obj.lock_id = message.lockId ? message.lockId.toString() : undefined;
    return obj;
  },
  fromAminoMsg(object) {
    return MsgSuperfluidUnbondLock.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/superfluid-unbond-lock",
      value: MsgSuperfluidUnbondLock.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return MsgSuperfluidUnbondLock.decode(message.value);
  },
  toProto(message) {
    return MsgSuperfluidUnbondLock.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.superfluid.MsgSuperfluidUnbondLock",
      value: MsgSuperfluidUnbondLock.encode(message).finish()
    };
  }
};
function createBaseMsgSuperfluidUnbondLockResponse() {
  return {};
}
export const MsgSuperfluidUnbondLockResponse = {
  typeUrl: "/osmosis.superfluid.MsgSuperfluidUnbondLockResponse",
  encode(_, writer = _m0.Writer.create()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSuperfluidUnbondLockResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(_) {
    const message = createBaseMsgSuperfluidUnbondLockResponse();
    return message;
  },
  fromAmino(_) {
    return {};
  },
  toAmino(_) {
    const obj = {};
    return obj;
  },
  fromAminoMsg(object) {
    return MsgSuperfluidUnbondLockResponse.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/superfluid-unbond-lock-response",
      value: MsgSuperfluidUnbondLockResponse.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return MsgSuperfluidUnbondLockResponse.decode(message.value);
  },
  toProto(message) {
    return MsgSuperfluidUnbondLockResponse.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.superfluid.MsgSuperfluidUnbondLockResponse",
      value: MsgSuperfluidUnbondLockResponse.encode(message).finish()
    };
  }
};
function createBaseMsgSuperfluidUndelegateAndUnbondLock() {
  return {
    sender: "",
    lockId: Long.UZERO,
    coin: undefined
  };
}
export const MsgSuperfluidUndelegateAndUnbondLock = {
  typeUrl: "/osmosis.superfluid.MsgSuperfluidUndelegateAndUnbondLock",
  encode(message, writer = _m0.Writer.create()) {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (!message.lockId.isZero()) {
      writer.uint32(16).uint64(message.lockId);
    }
    if (message.coin !== undefined) {
      Coin.encode(message.coin, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSuperfluidUndelegateAndUnbondLock();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sender = reader.string();
          break;
        case 2:
          message.lockId = reader.uint64();
          break;
        case 3:
          message.coin = Coin.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$sender4;
    const message = createBaseMsgSuperfluidUndelegateAndUnbondLock();
    message.sender = (_object$sender4 = object.sender) !== null && _object$sender4 !== void 0 ? _object$sender4 : "";
    message.lockId = object.lockId !== undefined && object.lockId !== null ? Long.fromValue(object.lockId) : Long.UZERO;
    message.coin = object.coin !== undefined && object.coin !== null ? Coin.fromPartial(object.coin) : undefined;
    return message;
  },
  fromAmino(object) {
    return {
      sender: object.sender,
      lockId: Long.fromString(object.lock_id),
      coin: object !== null && object !== void 0 && object.coin ? Coin.fromAmino(object.coin) : undefined
    };
  },
  toAmino(message) {
    const obj = {};
    obj.sender = message.sender;
    obj.lock_id = message.lockId ? message.lockId.toString() : undefined;
    obj.coin = message.coin ? Coin.toAmino(message.coin) : undefined;
    return obj;
  },
  fromAminoMsg(object) {
    return MsgSuperfluidUndelegateAndUnbondLock.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/superfluid-undelegate-and-unbond-lock",
      value: MsgSuperfluidUndelegateAndUnbondLock.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return MsgSuperfluidUndelegateAndUnbondLock.decode(message.value);
  },
  toProto(message) {
    return MsgSuperfluidUndelegateAndUnbondLock.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.superfluid.MsgSuperfluidUndelegateAndUnbondLock",
      value: MsgSuperfluidUndelegateAndUnbondLock.encode(message).finish()
    };
  }
};
function createBaseMsgSuperfluidUndelegateAndUnbondLockResponse() {
  return {};
}
export const MsgSuperfluidUndelegateAndUnbondLockResponse = {
  typeUrl: "/osmosis.superfluid.MsgSuperfluidUndelegateAndUnbondLockResponse",
  encode(_, writer = _m0.Writer.create()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSuperfluidUndelegateAndUnbondLockResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(_) {
    const message = createBaseMsgSuperfluidUndelegateAndUnbondLockResponse();
    return message;
  },
  fromAmino(_) {
    return {};
  },
  toAmino(_) {
    const obj = {};
    return obj;
  },
  fromAminoMsg(object) {
    return MsgSuperfluidUndelegateAndUnbondLockResponse.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/superfluid-undelegate-and-unbond-lock-response",
      value: MsgSuperfluidUndelegateAndUnbondLockResponse.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return MsgSuperfluidUndelegateAndUnbondLockResponse.decode(message.value);
  },
  toProto(message) {
    return MsgSuperfluidUndelegateAndUnbondLockResponse.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.superfluid.MsgSuperfluidUndelegateAndUnbondLockResponse",
      value: MsgSuperfluidUndelegateAndUnbondLockResponse.encode(message).finish()
    };
  }
};
function createBaseMsgLockAndSuperfluidDelegate() {
  return {
    sender: "",
    coins: [],
    valAddr: ""
  };
}
export const MsgLockAndSuperfluidDelegate = {
  typeUrl: "/osmosis.superfluid.MsgLockAndSuperfluidDelegate",
  encode(message, writer = _m0.Writer.create()) {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    for (const v of message.coins) {
      Coin.encode(v, writer.uint32(18).fork()).ldelim();
    }
    if (message.valAddr !== "") {
      writer.uint32(26).string(message.valAddr);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgLockAndSuperfluidDelegate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sender = reader.string();
          break;
        case 2:
          message.coins.push(Coin.decode(reader, reader.uint32()));
          break;
        case 3:
          message.valAddr = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$sender5, _object$coins, _object$valAddr2;
    const message = createBaseMsgLockAndSuperfluidDelegate();
    message.sender = (_object$sender5 = object.sender) !== null && _object$sender5 !== void 0 ? _object$sender5 : "";
    message.coins = ((_object$coins = object.coins) === null || _object$coins === void 0 ? void 0 : _object$coins.map(e => Coin.fromPartial(e))) || [];
    message.valAddr = (_object$valAddr2 = object.valAddr) !== null && _object$valAddr2 !== void 0 ? _object$valAddr2 : "";
    return message;
  },
  fromAmino(object) {
    return {
      sender: object.sender,
      coins: Array.isArray(object === null || object === void 0 ? void 0 : object.coins) ? object.coins.map(e => Coin.fromAmino(e)) : [],
      valAddr: object.val_addr
    };
  },
  toAmino(message) {
    const obj = {};
    obj.sender = message.sender;
    if (message.coins) {
      obj.coins = message.coins.map(e => e ? Coin.toAmino(e) : undefined);
    } else {
      obj.coins = [];
    }
    obj.val_addr = message.valAddr;
    return obj;
  },
  fromAminoMsg(object) {
    return MsgLockAndSuperfluidDelegate.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/lock-and-superfluid-delegate",
      value: MsgLockAndSuperfluidDelegate.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return MsgLockAndSuperfluidDelegate.decode(message.value);
  },
  toProto(message) {
    return MsgLockAndSuperfluidDelegate.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.superfluid.MsgLockAndSuperfluidDelegate",
      value: MsgLockAndSuperfluidDelegate.encode(message).finish()
    };
  }
};
function createBaseMsgLockAndSuperfluidDelegateResponse() {
  return {
    ID: Long.UZERO
  };
}
export const MsgLockAndSuperfluidDelegateResponse = {
  typeUrl: "/osmosis.superfluid.MsgLockAndSuperfluidDelegateResponse",
  encode(message, writer = _m0.Writer.create()) {
    if (!message.ID.isZero()) {
      writer.uint32(8).uint64(message.ID);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgLockAndSuperfluidDelegateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.ID = reader.uint64();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    const message = createBaseMsgLockAndSuperfluidDelegateResponse();
    message.ID = object.ID !== undefined && object.ID !== null ? Long.fromValue(object.ID) : Long.UZERO;
    return message;
  },
  fromAmino(object) {
    return {
      ID: Long.fromString(object.ID)
    };
  },
  toAmino(message) {
    const obj = {};
    obj.ID = message.ID ? message.ID.toString() : undefined;
    return obj;
  },
  fromAminoMsg(object) {
    return MsgLockAndSuperfluidDelegateResponse.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/lock-and-superfluid-delegate-response",
      value: MsgLockAndSuperfluidDelegateResponse.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return MsgLockAndSuperfluidDelegateResponse.decode(message.value);
  },
  toProto(message) {
    return MsgLockAndSuperfluidDelegateResponse.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.superfluid.MsgLockAndSuperfluidDelegateResponse",
      value: MsgLockAndSuperfluidDelegateResponse.encode(message).finish()
    };
  }
};
function createBaseMsgUnPoolWhitelistedPool() {
  return {
    sender: "",
    poolId: Long.UZERO
  };
}
export const MsgUnPoolWhitelistedPool = {
  typeUrl: "/osmosis.superfluid.MsgUnPoolWhitelistedPool",
  encode(message, writer = _m0.Writer.create()) {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (!message.poolId.isZero()) {
      writer.uint32(16).uint64(message.poolId);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUnPoolWhitelistedPool();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sender = reader.string();
          break;
        case 2:
          message.poolId = reader.uint64();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$sender6;
    const message = createBaseMsgUnPoolWhitelistedPool();
    message.sender = (_object$sender6 = object.sender) !== null && _object$sender6 !== void 0 ? _object$sender6 : "";
    message.poolId = object.poolId !== undefined && object.poolId !== null ? Long.fromValue(object.poolId) : Long.UZERO;
    return message;
  },
  fromAmino(object) {
    return {
      sender: object.sender,
      poolId: Long.fromString(object.pool_id)
    };
  },
  toAmino(message) {
    const obj = {};
    obj.sender = message.sender;
    obj.pool_id = message.poolId ? message.poolId.toString() : undefined;
    return obj;
  },
  fromAminoMsg(object) {
    return MsgUnPoolWhitelistedPool.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/unpool-whitelisted-pool",
      value: MsgUnPoolWhitelistedPool.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return MsgUnPoolWhitelistedPool.decode(message.value);
  },
  toProto(message) {
    return MsgUnPoolWhitelistedPool.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.superfluid.MsgUnPoolWhitelistedPool",
      value: MsgUnPoolWhitelistedPool.encode(message).finish()
    };
  }
};
function createBaseMsgUnPoolWhitelistedPoolResponse() {
  return {
    exitedLockIds: []
  };
}
export const MsgUnPoolWhitelistedPoolResponse = {
  typeUrl: "/osmosis.superfluid.MsgUnPoolWhitelistedPoolResponse",
  encode(message, writer = _m0.Writer.create()) {
    writer.uint32(10).fork();
    for (const v of message.exitedLockIds) {
      writer.uint64(v);
    }
    writer.ldelim();
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUnPoolWhitelistedPoolResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if ((tag & 7) === 2) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.exitedLockIds.push(reader.uint64());
            }
          } else {
            message.exitedLockIds.push(reader.uint64());
          }
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$exitedLockIds;
    const message = createBaseMsgUnPoolWhitelistedPoolResponse();
    message.exitedLockIds = ((_object$exitedLockIds = object.exitedLockIds) === null || _object$exitedLockIds === void 0 ? void 0 : _object$exitedLockIds.map(e => Long.fromValue(e))) || [];
    return message;
  },
  fromAmino(object) {
    return {
      exitedLockIds: Array.isArray(object === null || object === void 0 ? void 0 : object.exited_lock_ids) ? object.exited_lock_ids.map(e => e) : []
    };
  },
  toAmino(message) {
    const obj = {};
    if (message.exitedLockIds) {
      obj.exited_lock_ids = message.exitedLockIds.map(e => e);
    } else {
      obj.exited_lock_ids = [];
    }
    return obj;
  },
  fromAminoMsg(object) {
    return MsgUnPoolWhitelistedPoolResponse.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/un-pool-whitelisted-pool-response",
      value: MsgUnPoolWhitelistedPoolResponse.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return MsgUnPoolWhitelistedPoolResponse.decode(message.value);
  },
  toProto(message) {
    return MsgUnPoolWhitelistedPoolResponse.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.superfluid.MsgUnPoolWhitelistedPoolResponse",
      value: MsgUnPoolWhitelistedPoolResponse.encode(message).finish()
    };
  }
};
function createBaseMsgUnlockAndMigrateSharesToFullRangeConcentratedPosition() {
  return {
    sender: "",
    lockId: Long.UZERO,
    sharesToMigrate: undefined
  };
}
export const MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition = {
  typeUrl: "/osmosis.superfluid.MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition",
  encode(message, writer = _m0.Writer.create()) {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (!message.lockId.isZero()) {
      writer.uint32(16).uint64(message.lockId);
    }
    if (message.sharesToMigrate !== undefined) {
      Coin.encode(message.sharesToMigrate, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUnlockAndMigrateSharesToFullRangeConcentratedPosition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sender = reader.string();
          break;
        case 2:
          message.lockId = reader.uint64();
          break;
        case 3:
          message.sharesToMigrate = Coin.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$sender7;
    const message = createBaseMsgUnlockAndMigrateSharesToFullRangeConcentratedPosition();
    message.sender = (_object$sender7 = object.sender) !== null && _object$sender7 !== void 0 ? _object$sender7 : "";
    message.lockId = object.lockId !== undefined && object.lockId !== null ? Long.fromValue(object.lockId) : Long.UZERO;
    message.sharesToMigrate = object.sharesToMigrate !== undefined && object.sharesToMigrate !== null ? Coin.fromPartial(object.sharesToMigrate) : undefined;
    return message;
  },
  fromAmino(object) {
    return {
      sender: object.sender,
      lockId: Long.fromString(object.lock_id),
      sharesToMigrate: object !== null && object !== void 0 && object.shares_to_migrate ? Coin.fromAmino(object.shares_to_migrate) : undefined
    };
  },
  toAmino(message) {
    const obj = {};
    obj.sender = message.sender;
    obj.lock_id = message.lockId ? message.lockId.toString() : undefined;
    obj.shares_to_migrate = message.sharesToMigrate ? Coin.toAmino(message.sharesToMigrate) : undefined;
    return obj;
  },
  fromAminoMsg(object) {
    return MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/unlock-and-migrate-shares-to-full-range-concentrated-position",
      value: MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition.decode(message.value);
  },
  toProto(message) {
    return MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.superfluid.MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition",
      value: MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition.encode(message).finish()
    };
  }
};
function createBaseMsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse() {
  return {
    amount0: "",
    amount1: "",
    liquidityCreated: "",
    joinTime: undefined
  };
}
export const MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse = {
  typeUrl: "/osmosis.superfluid.MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse",
  encode(message, writer = _m0.Writer.create()) {
    if (message.amount0 !== "") {
      writer.uint32(10).string(message.amount0);
    }
    if (message.amount1 !== "") {
      writer.uint32(18).string(message.amount1);
    }
    if (message.liquidityCreated !== "") {
      writer.uint32(26).string(message.liquidityCreated);
    }
    if (message.joinTime !== undefined) {
      Timestamp.encode(toTimestamp(message.joinTime), writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.amount0 = reader.string();
          break;
        case 2:
          message.amount1 = reader.string();
          break;
        case 3:
          message.liquidityCreated = reader.string();
          break;
        case 4:
          message.joinTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$amount, _object$amount2, _object$liquidityCrea, _object$joinTime;
    const message = createBaseMsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse();
    message.amount0 = (_object$amount = object.amount0) !== null && _object$amount !== void 0 ? _object$amount : "";
    message.amount1 = (_object$amount2 = object.amount1) !== null && _object$amount2 !== void 0 ? _object$amount2 : "";
    message.liquidityCreated = (_object$liquidityCrea = object.liquidityCreated) !== null && _object$liquidityCrea !== void 0 ? _object$liquidityCrea : "";
    message.joinTime = (_object$joinTime = object.joinTime) !== null && _object$joinTime !== void 0 ? _object$joinTime : undefined;
    return message;
  },
  fromAmino(object) {
    return {
      amount0: object.amount0,
      amount1: object.amount1,
      liquidityCreated: object.liquidity_created,
      joinTime: object !== null && object !== void 0 && object.join_time ? Timestamp.fromAmino(object.join_time) : undefined
    };
  },
  toAmino(message) {
    const obj = {};
    obj.amount0 = message.amount0;
    obj.amount1 = message.amount1;
    obj.liquidity_created = message.liquidityCreated;
    obj.join_time = message.joinTime ? Timestamp.toAmino(message.joinTime) : undefined;
    return obj;
  },
  fromAminoMsg(object) {
    return MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/unlock-and-migrate-shares-to-full-range-concentrated-position-response",
      value: MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse.decode(message.value);
  },
  toProto(message) {
    return MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.superfluid.MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse",
      value: MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse.encode(message).finish()
    };
  }
};