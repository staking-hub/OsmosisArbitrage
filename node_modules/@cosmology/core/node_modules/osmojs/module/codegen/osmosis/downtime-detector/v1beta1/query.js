import { downtimeFromJSON } from "./downtime_duration";
import { Duration } from "../../../google/protobuf/duration";
import * as _m0 from "protobufjs/minimal";
import { isSet } from "../../../helpers";
/**
 * Query for has it been at least $RECOVERY_DURATION units of time,
 * since the chain has been down for $DOWNTIME_DURATION.
 */

function createBaseRecoveredSinceDowntimeOfLengthRequest() {
  return {
    downtime: 0,
    recovery: undefined
  };
}
export const RecoveredSinceDowntimeOfLengthRequest = {
  typeUrl: "/osmosis.downtimedetector.v1beta1.RecoveredSinceDowntimeOfLengthRequest",
  encode(message, writer = _m0.Writer.create()) {
    if (message.downtime !== 0) {
      writer.uint32(8).int32(message.downtime);
    }
    if (message.recovery !== undefined) {
      Duration.encode(message.recovery, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecoveredSinceDowntimeOfLengthRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.downtime = reader.int32();
          break;
        case 2:
          message.recovery = Duration.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$downtime;
    const message = createBaseRecoveredSinceDowntimeOfLengthRequest();
    message.downtime = (_object$downtime = object.downtime) !== null && _object$downtime !== void 0 ? _object$downtime : 0;
    message.recovery = object.recovery !== undefined && object.recovery !== null ? Duration.fromPartial(object.recovery) : undefined;
    return message;
  },
  fromAmino(object) {
    return {
      downtime: isSet(object.downtime) ? downtimeFromJSON(object.downtime) : 0,
      recovery: object !== null && object !== void 0 && object.recovery ? Duration.fromAmino(object.recovery) : undefined
    };
  },
  toAmino(message) {
    const obj = {};
    obj.downtime = message.downtime;
    obj.recovery = message.recovery ? Duration.toAmino(message.recovery) : undefined;
    return obj;
  },
  fromAminoMsg(object) {
    return RecoveredSinceDowntimeOfLengthRequest.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/downtimedetector/recovered-since-downtime-of-length-request",
      value: RecoveredSinceDowntimeOfLengthRequest.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return RecoveredSinceDowntimeOfLengthRequest.decode(message.value);
  },
  toProto(message) {
    return RecoveredSinceDowntimeOfLengthRequest.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.downtimedetector.v1beta1.RecoveredSinceDowntimeOfLengthRequest",
      value: RecoveredSinceDowntimeOfLengthRequest.encode(message).finish()
    };
  }
};
function createBaseRecoveredSinceDowntimeOfLengthResponse() {
  return {
    succesfullyRecovered: false
  };
}
export const RecoveredSinceDowntimeOfLengthResponse = {
  typeUrl: "/osmosis.downtimedetector.v1beta1.RecoveredSinceDowntimeOfLengthResponse",
  encode(message, writer = _m0.Writer.create()) {
    if (message.succesfullyRecovered === true) {
      writer.uint32(8).bool(message.succesfullyRecovered);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecoveredSinceDowntimeOfLengthResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.succesfullyRecovered = reader.bool();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$succesfullyRe;
    const message = createBaseRecoveredSinceDowntimeOfLengthResponse();
    message.succesfullyRecovered = (_object$succesfullyRe = object.succesfullyRecovered) !== null && _object$succesfullyRe !== void 0 ? _object$succesfullyRe : false;
    return message;
  },
  fromAmino(object) {
    return {
      succesfullyRecovered: object.succesfully_recovered
    };
  },
  toAmino(message) {
    const obj = {};
    obj.succesfully_recovered = message.succesfullyRecovered;
    return obj;
  },
  fromAminoMsg(object) {
    return RecoveredSinceDowntimeOfLengthResponse.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/downtimedetector/recovered-since-downtime-of-length-response",
      value: RecoveredSinceDowntimeOfLengthResponse.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return RecoveredSinceDowntimeOfLengthResponse.decode(message.value);
  },
  toProto(message) {
    return RecoveredSinceDowntimeOfLengthResponse.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.downtimedetector.v1beta1.RecoveredSinceDowntimeOfLengthResponse",
      value: RecoveredSinceDowntimeOfLengthResponse.encode(message).finish()
    };
  }
};