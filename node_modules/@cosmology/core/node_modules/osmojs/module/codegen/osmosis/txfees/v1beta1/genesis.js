import { FeeToken } from "./feetoken";
import * as _m0 from "protobufjs/minimal";
/** GenesisState defines the txfees module's genesis state. */

function createBaseGenesisState() {
  return {
    basedenom: "",
    feetokens: []
  };
}
export const GenesisState = {
  typeUrl: "/osmosis.txfees.v1beta1.GenesisState",
  encode(message, writer = _m0.Writer.create()) {
    if (message.basedenom !== "") {
      writer.uint32(10).string(message.basedenom);
    }
    for (const v of message.feetokens) {
      FeeToken.encode(v, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.basedenom = reader.string();
          break;
        case 2:
          message.feetokens.push(FeeToken.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$basedenom, _object$feetokens;
    const message = createBaseGenesisState();
    message.basedenom = (_object$basedenom = object.basedenom) !== null && _object$basedenom !== void 0 ? _object$basedenom : "";
    message.feetokens = ((_object$feetokens = object.feetokens) === null || _object$feetokens === void 0 ? void 0 : _object$feetokens.map(e => FeeToken.fromPartial(e))) || [];
    return message;
  },
  fromAmino(object) {
    return {
      basedenom: object.basedenom,
      feetokens: Array.isArray(object === null || object === void 0 ? void 0 : object.feetokens) ? object.feetokens.map(e => FeeToken.fromAmino(e)) : []
    };
  },
  toAmino(message) {
    const obj = {};
    obj.basedenom = message.basedenom;
    if (message.feetokens) {
      obj.feetokens = message.feetokens.map(e => e ? FeeToken.toAmino(e) : undefined);
    } else {
      obj.feetokens = [];
    }
    return obj;
  },
  fromAminoMsg(object) {
    return GenesisState.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/txfees/genesis-state",
      value: GenesisState.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return GenesisState.decode(message.value);
  },
  toProto(message) {
    return GenesisState.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.txfees.v1beta1.GenesisState",
      value: GenesisState.encode(message).finish()
    };
  }
};