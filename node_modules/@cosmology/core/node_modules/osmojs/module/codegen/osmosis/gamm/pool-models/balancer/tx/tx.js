import { PoolParams, PoolAsset } from "../balancerPool";
import { Coin } from "../../../../../cosmos/base/v1beta1/coin";
import { Timestamp } from "../../../../../google/protobuf/timestamp";
import { Long, toTimestamp, fromTimestamp } from "../../../../../helpers";
import * as _m0 from "protobufjs/minimal";
/** ===================== MsgCreatePool */

function createBaseMsgCreateBalancerPool() {
  return {
    sender: "",
    poolParams: undefined,
    poolAssets: [],
    futurePoolGovernor: ""
  };
}
export const MsgCreateBalancerPool = {
  typeUrl: "/osmosis.gamm.poolmodels.balancer.v1beta1.MsgCreateBalancerPool",
  encode(message, writer = _m0.Writer.create()) {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.poolParams !== undefined) {
      PoolParams.encode(message.poolParams, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.poolAssets) {
      PoolAsset.encode(v, writer.uint32(26).fork()).ldelim();
    }
    if (message.futurePoolGovernor !== "") {
      writer.uint32(34).string(message.futurePoolGovernor);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateBalancerPool();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sender = reader.string();
          break;
        case 2:
          message.poolParams = PoolParams.decode(reader, reader.uint32());
          break;
        case 3:
          message.poolAssets.push(PoolAsset.decode(reader, reader.uint32()));
          break;
        case 4:
          message.futurePoolGovernor = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$sender, _object$poolAssets, _object$futurePoolGov;
    const message = createBaseMsgCreateBalancerPool();
    message.sender = (_object$sender = object.sender) !== null && _object$sender !== void 0 ? _object$sender : "";
    message.poolParams = object.poolParams !== undefined && object.poolParams !== null ? PoolParams.fromPartial(object.poolParams) : undefined;
    message.poolAssets = ((_object$poolAssets = object.poolAssets) === null || _object$poolAssets === void 0 ? void 0 : _object$poolAssets.map(e => PoolAsset.fromPartial(e))) || [];
    message.futurePoolGovernor = (_object$futurePoolGov = object.futurePoolGovernor) !== null && _object$futurePoolGov !== void 0 ? _object$futurePoolGov : "";
    return message;
  },
  fromAmino(object) {
    return {
      sender: object.sender,
      poolParams: object !== null && object !== void 0 && object.pool_params ? PoolParams.fromAmino(object.pool_params) : undefined,
      poolAssets: Array.isArray(object === null || object === void 0 ? void 0 : object.pool_assets) ? object.pool_assets.map(e => PoolAsset.fromAmino(e)) : [],
      futurePoolGovernor: object.future_pool_governor
    };
  },
  toAmino(message) {
    const obj = {};
    obj.sender = message.sender;
    obj.pool_params = message.poolParams ? PoolParams.toAmino(message.poolParams) : undefined;
    if (message.poolAssets) {
      obj.pool_assets = message.poolAssets.map(e => e ? PoolAsset.toAmino(e) : undefined);
    } else {
      obj.pool_assets = [];
    }
    obj.future_pool_governor = message.futurePoolGovernor;
    return obj;
  },
  fromAminoMsg(object) {
    return MsgCreateBalancerPool.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/gamm/create-balancer-pool",
      value: MsgCreateBalancerPool.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return MsgCreateBalancerPool.decode(message.value);
  },
  toProto(message) {
    return MsgCreateBalancerPool.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.gamm.poolmodels.balancer.v1beta1.MsgCreateBalancerPool",
      value: MsgCreateBalancerPool.encode(message).finish()
    };
  }
};
function createBaseMsgCreateBalancerPoolResponse() {
  return {
    poolId: Long.UZERO
  };
}
export const MsgCreateBalancerPoolResponse = {
  typeUrl: "/osmosis.gamm.poolmodels.balancer.v1beta1.MsgCreateBalancerPoolResponse",
  encode(message, writer = _m0.Writer.create()) {
    if (!message.poolId.isZero()) {
      writer.uint32(8).uint64(message.poolId);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateBalancerPoolResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.poolId = reader.uint64();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    const message = createBaseMsgCreateBalancerPoolResponse();
    message.poolId = object.poolId !== undefined && object.poolId !== null ? Long.fromValue(object.poolId) : Long.UZERO;
    return message;
  },
  fromAmino(object) {
    return {
      poolId: Long.fromString(object.pool_id)
    };
  },
  toAmino(message) {
    const obj = {};
    obj.pool_id = message.poolId ? message.poolId.toString() : undefined;
    return obj;
  },
  fromAminoMsg(object) {
    return MsgCreateBalancerPoolResponse.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/gamm/poolmodels/balancer/create-balancer-pool-response",
      value: MsgCreateBalancerPoolResponse.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return MsgCreateBalancerPoolResponse.decode(message.value);
  },
  toProto(message) {
    return MsgCreateBalancerPoolResponse.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.gamm.poolmodels.balancer.v1beta1.MsgCreateBalancerPoolResponse",
      value: MsgCreateBalancerPoolResponse.encode(message).finish()
    };
  }
};
function createBaseMsgMigrateSharesToFullRangeConcentratedPosition() {
  return {
    sender: "",
    sharesToMigrate: undefined
  };
}
export const MsgMigrateSharesToFullRangeConcentratedPosition = {
  typeUrl: "/osmosis.gamm.poolmodels.balancer.v1beta1.MsgMigrateSharesToFullRangeConcentratedPosition",
  encode(message, writer = _m0.Writer.create()) {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.sharesToMigrate !== undefined) {
      Coin.encode(message.sharesToMigrate, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgMigrateSharesToFullRangeConcentratedPosition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sender = reader.string();
          break;
        case 2:
          message.sharesToMigrate = Coin.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$sender2;
    const message = createBaseMsgMigrateSharesToFullRangeConcentratedPosition();
    message.sender = (_object$sender2 = object.sender) !== null && _object$sender2 !== void 0 ? _object$sender2 : "";
    message.sharesToMigrate = object.sharesToMigrate !== undefined && object.sharesToMigrate !== null ? Coin.fromPartial(object.sharesToMigrate) : undefined;
    return message;
  },
  fromAmino(object) {
    return {
      sender: object.sender,
      sharesToMigrate: object !== null && object !== void 0 && object.shares_to_migrate ? Coin.fromAmino(object.shares_to_migrate) : undefined
    };
  },
  toAmino(message) {
    const obj = {};
    obj.sender = message.sender;
    obj.shares_to_migrate = message.sharesToMigrate ? Coin.toAmino(message.sharesToMigrate) : undefined;
    return obj;
  },
  fromAminoMsg(object) {
    return MsgMigrateSharesToFullRangeConcentratedPosition.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/gamm/poolmodels/balancer/migrate-shares-to-full-range-concentrated-position",
      value: MsgMigrateSharesToFullRangeConcentratedPosition.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return MsgMigrateSharesToFullRangeConcentratedPosition.decode(message.value);
  },
  toProto(message) {
    return MsgMigrateSharesToFullRangeConcentratedPosition.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.gamm.poolmodels.balancer.v1beta1.MsgMigrateSharesToFullRangeConcentratedPosition",
      value: MsgMigrateSharesToFullRangeConcentratedPosition.encode(message).finish()
    };
  }
};
function createBaseMsgMigrateSharesToFullRangeConcentratedPositionResponse() {
  return {
    amount0: "",
    amount1: "",
    liquidityCreated: "",
    joinTime: undefined
  };
}
export const MsgMigrateSharesToFullRangeConcentratedPositionResponse = {
  typeUrl: "/osmosis.gamm.poolmodels.balancer.v1beta1.MsgMigrateSharesToFullRangeConcentratedPositionResponse",
  encode(message, writer = _m0.Writer.create()) {
    if (message.amount0 !== "") {
      writer.uint32(10).string(message.amount0);
    }
    if (message.amount1 !== "") {
      writer.uint32(18).string(message.amount1);
    }
    if (message.liquidityCreated !== "") {
      writer.uint32(26).string(message.liquidityCreated);
    }
    if (message.joinTime !== undefined) {
      Timestamp.encode(toTimestamp(message.joinTime), writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgMigrateSharesToFullRangeConcentratedPositionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.amount0 = reader.string();
          break;
        case 2:
          message.amount1 = reader.string();
          break;
        case 3:
          message.liquidityCreated = reader.string();
          break;
        case 4:
          message.joinTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$amount, _object$amount2, _object$liquidityCrea, _object$joinTime;
    const message = createBaseMsgMigrateSharesToFullRangeConcentratedPositionResponse();
    message.amount0 = (_object$amount = object.amount0) !== null && _object$amount !== void 0 ? _object$amount : "";
    message.amount1 = (_object$amount2 = object.amount1) !== null && _object$amount2 !== void 0 ? _object$amount2 : "";
    message.liquidityCreated = (_object$liquidityCrea = object.liquidityCreated) !== null && _object$liquidityCrea !== void 0 ? _object$liquidityCrea : "";
    message.joinTime = (_object$joinTime = object.joinTime) !== null && _object$joinTime !== void 0 ? _object$joinTime : undefined;
    return message;
  },
  fromAmino(object) {
    return {
      amount0: object.amount0,
      amount1: object.amount1,
      liquidityCreated: object.liquidity_created,
      joinTime: object !== null && object !== void 0 && object.join_time ? Timestamp.fromAmino(object.join_time) : undefined
    };
  },
  toAmino(message) {
    const obj = {};
    obj.amount0 = message.amount0;
    obj.amount1 = message.amount1;
    obj.liquidity_created = message.liquidityCreated;
    obj.join_time = message.joinTime ? Timestamp.toAmino(message.joinTime) : undefined;
    return obj;
  },
  fromAminoMsg(object) {
    return MsgMigrateSharesToFullRangeConcentratedPositionResponse.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/gamm/poolmodels/balancer/migrate-shares-to-full-range-concentrated-position-response",
      value: MsgMigrateSharesToFullRangeConcentratedPositionResponse.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return MsgMigrateSharesToFullRangeConcentratedPositionResponse.decode(message.value);
  },
  toProto(message) {
    return MsgMigrateSharesToFullRangeConcentratedPositionResponse.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.gamm.poolmodels.balancer.v1beta1.MsgMigrateSharesToFullRangeConcentratedPositionResponse",
      value: MsgMigrateSharesToFullRangeConcentratedPositionResponse.encode(message).finish()
    };
  }
};