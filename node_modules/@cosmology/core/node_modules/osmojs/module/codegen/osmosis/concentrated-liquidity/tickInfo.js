import { DecCoin } from "../../cosmos/base/v1beta1/coin";
import * as _m0 from "protobufjs/minimal";
function createBaseTickInfo() {
  return {
    liquidityGross: "",
    liquidityNet: "",
    feeGrowthOutside: [],
    uptimeTrackers: []
  };
}
export const TickInfo = {
  typeUrl: "/osmosis.concentratedliquidity.v1beta1.TickInfo",
  encode(message, writer = _m0.Writer.create()) {
    if (message.liquidityGross !== "") {
      writer.uint32(10).string(message.liquidityGross);
    }
    if (message.liquidityNet !== "") {
      writer.uint32(18).string(message.liquidityNet);
    }
    for (const v of message.feeGrowthOutside) {
      DecCoin.encode(v, writer.uint32(26).fork()).ldelim();
    }
    for (const v of message.uptimeTrackers) {
      UptimeTracker.encode(v, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTickInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.liquidityGross = reader.string();
          break;
        case 2:
          message.liquidityNet = reader.string();
          break;
        case 3:
          message.feeGrowthOutside.push(DecCoin.decode(reader, reader.uint32()));
          break;
        case 4:
          message.uptimeTrackers.push(UptimeTracker.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$liquidityGros, _object$liquidityNet, _object$feeGrowthOuts, _object$uptimeTracker;
    const message = createBaseTickInfo();
    message.liquidityGross = (_object$liquidityGros = object.liquidityGross) !== null && _object$liquidityGros !== void 0 ? _object$liquidityGros : "";
    message.liquidityNet = (_object$liquidityNet = object.liquidityNet) !== null && _object$liquidityNet !== void 0 ? _object$liquidityNet : "";
    message.feeGrowthOutside = ((_object$feeGrowthOuts = object.feeGrowthOutside) === null || _object$feeGrowthOuts === void 0 ? void 0 : _object$feeGrowthOuts.map(e => DecCoin.fromPartial(e))) || [];
    message.uptimeTrackers = ((_object$uptimeTracker = object.uptimeTrackers) === null || _object$uptimeTracker === void 0 ? void 0 : _object$uptimeTracker.map(e => UptimeTracker.fromPartial(e))) || [];
    return message;
  },
  fromAmino(object) {
    return {
      liquidityGross: object.liquidity_gross,
      liquidityNet: object.liquidity_net,
      feeGrowthOutside: Array.isArray(object === null || object === void 0 ? void 0 : object.fee_growth_outside) ? object.fee_growth_outside.map(e => DecCoin.fromAmino(e)) : [],
      uptimeTrackers: Array.isArray(object === null || object === void 0 ? void 0 : object.uptime_trackers) ? object.uptime_trackers.map(e => UptimeTracker.fromAmino(e)) : []
    };
  },
  toAmino(message) {
    const obj = {};
    obj.liquidity_gross = message.liquidityGross;
    obj.liquidity_net = message.liquidityNet;
    if (message.feeGrowthOutside) {
      obj.fee_growth_outside = message.feeGrowthOutside.map(e => e ? DecCoin.toAmino(e) : undefined);
    } else {
      obj.fee_growth_outside = [];
    }
    if (message.uptimeTrackers) {
      obj.uptime_trackers = message.uptimeTrackers.map(e => e ? UptimeTracker.toAmino(e) : undefined);
    } else {
      obj.uptime_trackers = [];
    }
    return obj;
  },
  fromAminoMsg(object) {
    return TickInfo.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/concentratedliquidity/tick-info",
      value: TickInfo.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return TickInfo.decode(message.value);
  },
  toProto(message) {
    return TickInfo.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.concentratedliquidity.v1beta1.TickInfo",
      value: TickInfo.encode(message).finish()
    };
  }
};
function createBaseUptimeTracker() {
  return {
    uptimeGrowthOutside: []
  };
}
export const UptimeTracker = {
  typeUrl: "/osmosis.concentratedliquidity.v1beta1.UptimeTracker",
  encode(message, writer = _m0.Writer.create()) {
    for (const v of message.uptimeGrowthOutside) {
      DecCoin.encode(v, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUptimeTracker();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.uptimeGrowthOutside.push(DecCoin.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$uptimeGrowthO;
    const message = createBaseUptimeTracker();
    message.uptimeGrowthOutside = ((_object$uptimeGrowthO = object.uptimeGrowthOutside) === null || _object$uptimeGrowthO === void 0 ? void 0 : _object$uptimeGrowthO.map(e => DecCoin.fromPartial(e))) || [];
    return message;
  },
  fromAmino(object) {
    return {
      uptimeGrowthOutside: Array.isArray(object === null || object === void 0 ? void 0 : object.uptime_growth_outside) ? object.uptime_growth_outside.map(e => DecCoin.fromAmino(e)) : []
    };
  },
  toAmino(message) {
    const obj = {};
    if (message.uptimeGrowthOutside) {
      obj.uptime_growth_outside = message.uptimeGrowthOutside.map(e => e ? DecCoin.toAmino(e) : undefined);
    } else {
      obj.uptime_growth_outside = [];
    }
    return obj;
  },
  fromAminoMsg(object) {
    return UptimeTracker.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "osmosis/concentratedliquidity/uptime-tracker",
      value: UptimeTracker.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return UptimeTracker.decode(message.value);
  },
  toProto(message) {
    return UptimeTracker.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/osmosis.concentratedliquidity.v1beta1.UptimeTracker",
      value: UptimeTracker.encode(message).finish()
    };
  }
};