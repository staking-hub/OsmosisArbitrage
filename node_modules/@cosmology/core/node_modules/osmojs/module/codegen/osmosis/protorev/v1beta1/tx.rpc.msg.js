import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import * as _m0 from "protobufjs/minimal";
import { MsgSetHotRoutes, MsgSetHotRoutesResponse, MsgSetDeveloperAccount, MsgSetDeveloperAccountResponse, MsgSetMaxPoolPointsPerTx, MsgSetMaxPoolPointsPerTxResponse, MsgSetMaxPoolPointsPerBlock, MsgSetMaxPoolPointsPerBlockResponse, MsgSetPoolWeights, MsgSetPoolWeightsResponse, MsgSetBaseDenoms, MsgSetBaseDenomsResponse } from "./tx";
export class MsgClientImpl {
  constructor(rpc) {
    _defineProperty(this, "rpc", void 0);
    this.rpc = rpc;
    this.setHotRoutes = this.setHotRoutes.bind(this);
    this.setDeveloperAccount = this.setDeveloperAccount.bind(this);
    this.setMaxPoolPointsPerTx = this.setMaxPoolPointsPerTx.bind(this);
    this.setMaxPoolPointsPerBlock = this.setMaxPoolPointsPerBlock.bind(this);
    this.setPoolWeights = this.setPoolWeights.bind(this);
    this.setBaseDenoms = this.setBaseDenoms.bind(this);
  }
  setHotRoutes(request) {
    const data = MsgSetHotRoutes.encode(request).finish();
    const promise = this.rpc.request("osmosis.protorev.v1beta1.Msg", "SetHotRoutes", data);
    return promise.then(data => MsgSetHotRoutesResponse.decode(new _m0.Reader(data)));
  }
  setDeveloperAccount(request) {
    const data = MsgSetDeveloperAccount.encode(request).finish();
    const promise = this.rpc.request("osmosis.protorev.v1beta1.Msg", "SetDeveloperAccount", data);
    return promise.then(data => MsgSetDeveloperAccountResponse.decode(new _m0.Reader(data)));
  }
  setMaxPoolPointsPerTx(request) {
    const data = MsgSetMaxPoolPointsPerTx.encode(request).finish();
    const promise = this.rpc.request("osmosis.protorev.v1beta1.Msg", "SetMaxPoolPointsPerTx", data);
    return promise.then(data => MsgSetMaxPoolPointsPerTxResponse.decode(new _m0.Reader(data)));
  }
  setMaxPoolPointsPerBlock(request) {
    const data = MsgSetMaxPoolPointsPerBlock.encode(request).finish();
    const promise = this.rpc.request("osmosis.protorev.v1beta1.Msg", "SetMaxPoolPointsPerBlock", data);
    return promise.then(data => MsgSetMaxPoolPointsPerBlockResponse.decode(new _m0.Reader(data)));
  }
  setPoolWeights(request) {
    const data = MsgSetPoolWeights.encode(request).finish();
    const promise = this.rpc.request("osmosis.protorev.v1beta1.Msg", "SetPoolWeights", data);
    return promise.then(data => MsgSetPoolWeightsResponse.decode(new _m0.Reader(data)));
  }
  setBaseDenoms(request) {
    const data = MsgSetBaseDenoms.encode(request).finish();
    const promise = this.rpc.request("osmosis.protorev.v1beta1.Msg", "SetBaseDenoms", data);
    return promise.then(data => MsgSetBaseDenomsResponse.decode(new _m0.Reader(data)));
  }
}