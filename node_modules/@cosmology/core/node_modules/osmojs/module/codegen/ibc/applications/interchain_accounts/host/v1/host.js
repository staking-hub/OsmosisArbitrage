import * as _m0 from "protobufjs/minimal";
/**
 * Params defines the set of on-chain interchain accounts parameters.
 * The following parameters may be used to disable the host submodule.
 */

function createBaseParams() {
  return {
    hostEnabled: false,
    allowMessages: []
  };
}
export const Params = {
  typeUrl: "/ibc.applications.interchain_accounts.host.v1.Params",
  encode(message, writer = _m0.Writer.create()) {
    if (message.hostEnabled === true) {
      writer.uint32(8).bool(message.hostEnabled);
    }
    for (const v of message.allowMessages) {
      writer.uint32(18).string(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.hostEnabled = reader.bool();
          break;
        case 2:
          message.allowMessages.push(reader.string());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$hostEnabled, _object$allowMessages;
    const message = createBaseParams();
    message.hostEnabled = (_object$hostEnabled = object.hostEnabled) !== null && _object$hostEnabled !== void 0 ? _object$hostEnabled : false;
    message.allowMessages = ((_object$allowMessages = object.allowMessages) === null || _object$allowMessages === void 0 ? void 0 : _object$allowMessages.map(e => e)) || [];
    return message;
  },
  fromAmino(object) {
    return {
      hostEnabled: object.host_enabled,
      allowMessages: Array.isArray(object === null || object === void 0 ? void 0 : object.allow_messages) ? object.allow_messages.map(e => e) : []
    };
  },
  toAmino(message) {
    const obj = {};
    obj.host_enabled = message.hostEnabled;
    if (message.allowMessages) {
      obj.allow_messages = message.allowMessages.map(e => e);
    } else {
      obj.allow_messages = [];
    }
    return obj;
  },
  fromAminoMsg(object) {
    return Params.fromAmino(object.value);
  },
  toAminoMsg(message) {
    return {
      type: "cosmos-sdk/Params",
      value: Params.toAmino(message)
    };
  },
  fromProtoMsg(message) {
    return Params.decode(message.value);
  },
  toProto(message) {
    return Params.encode(message).finish();
  },
  toProtoMsg(message) {
    return {
      typeUrl: "/ibc.applications.interchain_accounts.host.v1.Params",
      value: Params.encode(message).finish()
    };
  }
};